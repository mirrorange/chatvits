!function(){var t={849:function(t,e,i){var s=!!(i.g===i.g.window&&i.g.URL&&i.g.Blob&&i.g.Worker);function r(t,e){var r,a=this;if(e=e||{},s)return r=t.toString().trim().match(/^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/)[1],new i.g.Worker(i.g.URL.createObjectURL(new i.g.Blob([r],{type:"text/javascript"})));this.self=e,this.self.postMessage=function(t){setTimeout((function(){a.onmessage({data:t})}),0)},setTimeout(t.bind(e,e),0)}r.prototype.postMessage=function(t){var e=this;setTimeout((function(){e.self.onmessage({data:t})}),0)},t.exports=r},696:function(t,e,i){t.exports=i(877)},877:function(t,e,i){"use strict";var s,r=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),a=(s=i(5))&&s.__esModule?s:{default:s};function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o={nFrequencyBars:255,onAnalysed:null},l=function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n(this,t),this.config=Object.assign({},o,i),this.audioContext=e,this.audioInput=null,this.realAudioInput=null,this.inputPoint=null,this.audioRecorder=null,this.rafID=null,this.analyserContext=null,this.recIndex=0,this.stream=null,this.updateAnalysers=this.updateAnalysers.bind(this)}return r(t,[{key:"init",value:function(t){var e=this;return new Promise((function(i){e.inputPoint=e.audioContext.createGain(),e.stream=t,e.realAudioInput=e.audioContext.createMediaStreamSource(t),e.audioInput=e.realAudioInput,e.audioInput.connect(e.inputPoint),e.analyserNode=e.audioContext.createAnalyser(),e.analyserNode.fftSize=2048,e.inputPoint.connect(e.analyserNode),e.audioRecorder=new a.default(e.inputPoint);var s=e.audioContext.createGain();s.gain.value=0,e.inputPoint.connect(s),s.connect(e.audioContext.destination),e.updateAnalysers(),i()}))}},{key:"start",value:function(){var t=this;return new Promise((function(e,i){t.audioRecorder?(t.audioRecorder.clear(),t.audioRecorder.record(),e(t.stream)):i("Not currently recording")}))}},{key:"stop",value:function(){var t=this;return new Promise((function(e){t.audioRecorder.stop(),t.audioRecorder.getBuffer((function(i){t.audioRecorder.exportWAV((function(t){return e({buffer:i,blob:t})}))}))}))}},{key:"updateAnalysers",value:function(){if(this.config.onAnalysed){requestAnimationFrame(this.updateAnalysers);var t=new Uint8Array(this.analyserNode.frequencyBinCount);this.analyserNode.getByteFrequencyData(t);for(var e=new Array(255),i=0,s=void 0,r=0;r<255;r+=1)0!=(s=Math.floor(t[r])-Math.floor(t[r])%5)&&(i=r),e[r]=s;this.config.onAnalysed({data:e,lineTo:i})}}},{key:"setOnAnalysed",value:function(t){this.config.onAnalysed=t}}]),t}();l.download=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"audio";a.default.forceDownload(t,e+".wav")},e.default=l},5:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s,r=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),a=(s=i(849))&&s.__esModule?s:{default:s},n={bufferLen:4096,numChannels:2,mimeType:"audio/wav"},o=function(){function t(e,i){var s=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.config=Object.assign({},n,i),this.recording=!1,this.callbacks={getBuffer:[],exportWAV:[]},this.context=e.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,this.config.bufferLen,this.config.numChannels,this.config.numChannels),this.node.onaudioprocess=function(t){if(s.recording){for(var e=[],i=0;i<s.config.numChannels;i++)e.push(t.inputBuffer.getChannelData(i));s.worker.postMessage({command:"record",buffer:e})}},e.connect(this.node),this.node.connect(this.context.destination),this.worker=new a.default((function(){var t=0,e=[],i=void 0,s=void 0;function r(){for(var t=0;t<s;t++)e[t]=[]}function a(t,e){for(var i=new Float32Array(e),s=0,r=0;r<t.length;r++)i.set(t[r],s),s+=t[r].length;return i}function n(t,e,i){for(var s=0;s<i.length;s+=1)t.setUint8(e+s,i.charCodeAt(s))}this.onmessage=function(o){switch(o.data.command){case"init":!function(t){i=t.sampleRate,s=t.numChannels,r()}(o.data.config);break;case"record":!function(i){for(var r=0;r<s;r++)e[r].push(i[r]);t+=i[0].length}(o.data.buffer);break;case"exportWAV":!function(r){for(var o=[],l=0;l<s;l++)o.push(a(e[l],t));var u,h,c,d=(u=2===s?function(t,e){for(var i=t.length+e.length,s=new Float32Array(i),r=0,a=0;r<i;)s[r++]=t[a],s[r++]=e[a],a++;return s}(o[0],o[1]):o[0],h=new ArrayBuffer(44+2*u.length),n(c=new DataView(h),0,"RIFF"),c.setUint32(4,36+2*u.length,!0),n(c,8,"WAVE"),n(c,12,"fmt "),c.setUint32(16,16,!0),c.setUint16(20,1,!0),c.setUint16(22,s,!0),c.setUint32(24,i,!0),c.setUint32(28,4*i,!0),c.setUint16(32,2*s,!0),c.setUint16(34,16,!0),n(c,36,"data"),c.setUint32(40,2*u.length,!0),function(t,e,i){for(var s=0;s<i.length;s++,e+=2){var r=Math.max(-1,Math.min(1,i[s]));t.setInt16(e,r<0?32768*r:32767*r,!0)}}(c,44,u),c),g=new Blob([d],{type:r});this.postMessage({command:"exportWAV",data:g})}(o.data.type);break;case"getBuffer":!function(){for(var i=[],r=0;r<s;r++)i.push(a(e[r],t));this.postMessage({command:"getBuffer",data:i})}();break;case"clear":t=0,e=[],r()}}}),{}),this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.config.numChannels}}),this.worker.onmessage=function(t){var e=s.callbacks[t.data.command].pop();"function"==typeof e&&e(t.data.data)}}return r(t,[{key:"record",value:function(){this.recording=!0}},{key:"stop",value:function(){this.recording=!1}},{key:"clear",value:function(){this.worker.postMessage({command:"clear"})}},{key:"getBuffer",value:function(t){if(!(t=t||this.config.callback))throw new Error("Callback not set");this.callbacks.getBuffer.push(t),this.worker.postMessage({command:"getBuffer"})}},{key:"exportWAV",value:function(t,e){if(e=e||this.config.mimeType,!(t=t||this.config.callback))throw new Error("Callback not set");this.callbacks.exportWAV.push(t),this.worker.postMessage({command:"exportWAV",type:e})}}]),t}();o.forceDownload=function(t,e){var i=document.createElement("a");i.style="display: none",document.body.appendChild(i);var s=window.URL.createObjectURL(t);i.href=s,i.download=e,i.click(),window.URL.revokeObjectURL(s),document.body.removeChild(i)},e.default=o}},e={};function i(s){var r=e[s];if(void 0!==r)return r.exports;var a=e[s]={exports:{}};return t[s](a,a.exports,i),a.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),function(){"use strict";class t{constructor(t=0){t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}at(t){return this._ptr[t]}set(t,e){this._ptr[t]=e}get(t=0){const e=new Array;for(let i=t;i<this._size;i++)e.push(this._ptr[i]);return e}pushBack(e){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?t.s_defaultSize:2*this._capacity),this._ptr[this._size++]=e}clear(){this._ptr.length=0,this._size=0}getSize(){return this._size}assign(t,e){this._size<t&&this.prepareCapacity(t);for(let i=0;i<t;i++)this._ptr[i]=e;this._size=t}resize(t,e=null){this.updateSize(t,e,!0)}updateSize(t,e=null,i=!0){if(this._size<t)if(this.prepareCapacity(t),i)for(let i=this._size;i<t;i++)this._ptr[i]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(let i=this._size;i<t;i++)this._ptr[i]=e;else{const e=this._size-t;this._ptr.splice(this._size-e,e)}this._size=t}insert(t,e,i){let s=t._index;const r=e._index,a=i._index,n=a-r;this.prepareCapacity(this._size+n);const o=this._size-s;if(o>0)for(let t=0;t<o;t++)this._ptr.splice(s+t,0,null);for(let t=r;t<a;t++,s++)this._ptr[s]=e._vector._ptr[t];this._size=this._size+n}remove(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))}erase(t){const i=t._index;return i<0||this._size<=i?t:(this._ptr.splice(i,1),--this._size,new e(this,i))}prepareCapacity(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))}begin(){return 0==this._size?this.end():new e(this,0)}end(){return new e(this,this._size)}getOffset(e){const i=new t;return i._ptr=this.get(e),i._size=this.get(e).length,i._capacity=this.get(e).length,i}}t.s_defaultSize=10;class e{constructor(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}set(t){return this._index=t._index,this._vector=t._vector,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new e(this._vector,this._index++)}decrement(){return new e(this._vector,this._index--)}ptr(){return this._vector._ptr[this._index]}substitution(t){return this._index=t._index,this._vector=t._vector,this}notEqual(t){return this._index!=t._index||this._vector!=t._vector}}var s,r,a,n,o,l,u;!function(i){i.csmVector=t,i.iterator=e}(s||(s={}));class h{append(t,e){return this.s+=void 0!==e?t.substr(0,e):t,this}expansion(t,e){for(let i=0;i<t;i++)this.append(e);return this}getBytes(){return encodeURIComponent(this.s).replace(/%../g,"x").length}getLength(){return this.s.length}isLess(t){return this.s<t.s}isGreat(t){return this.s>t.s}isEqual(t){return this.s==t}isEmpty(){return 0==this.s.length}constructor(t){this.s=t}}!function(t){t.csmString=h}(r||(r={}));class c{getString(){return this._id}constructor(t){this._id="string"!=typeof t?t:new h(t)}isEqual(t){return"string"==typeof t?this._id.isEqual(t):t instanceof h?this._id.isEqual(t.s):t instanceof c&&this._id.isEqual(t._id.s)}isNotEqual(t){return"string"==typeof t?!this._id.isEqual(t):t instanceof h?!this._id.isEqual(t.s):t instanceof c&&!this._id.isEqual(t._id.s)}}!function(t){t.CubismId=c}(a||(a={}));class d{constructor(){this._ids=new t}release(){for(let t=0;t<this._ids.getSize();++t)this._ids.set(t,void 0);this._ids=null}registerIds(t){for(let e=0;e<t.length;e++)this.registerId(t[e])}registerId(t){let e=null;return"string"!=typeof t?this.registerId(t.s):(null!=(e=this.findId(t))||(e=new c(t),this._ids.pushBack(e)),e)}getId(t){return this.registerId(t)}isExist(t){return"string"==typeof t?null!=this.findId(t):this.isExist(t.s)}findId(t){for(let e=0;e<this._ids.getSize();++e)if(this._ids.at(e).getString().isEqual(t))return this._ids.at(e);return null}}!function(t){t.CubismIdManager=d}(n||(n={}));class g{constructor(){this._tr=new Float32Array(16),this.loadIdentity()}static multiply(t,e,i){const s=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);for(let i=0;i<4;++i)for(let r=0;r<4;++r)for(let a=0;a<4;++a)s[r+4*i]+=t[a+4*i]*e[r+4*a];for(let t=0;t<16;++t)i[t]=s[t]}loadIdentity(){const t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)}setMatrix(t){for(let e=0;e<16;++e)this._tr[e]=t[e]}getArray(){return this._tr}getScaleX(){return this._tr[0]}getScaleY(){return this._tr[5]}getTranslateX(){return this._tr[12]}getTranslateY(){return this._tr[13]}transformX(t){return this._tr[0]*t+this._tr[12]}transformY(t){return this._tr[5]*t+this._tr[13]}invertTransformX(t){return(t-this._tr[12])/this._tr[0]}invertTransformY(t){return(t-this._tr[13])/this._tr[5]}translateRelative(t,e){const i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);g.multiply(i,this._tr,this._tr)}translate(t,e){this._tr[12]=t,this._tr[13]=e}translateX(t){this._tr[12]=t}translateY(t){this._tr[13]=t}scaleRelative(t,e){const i=new Float32Array([t,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1]);g.multiply(i,this._tr,this._tr)}scale(t,e){this._tr[0]=t,this._tr[5]=e}multiplyByMatrix(t){g.multiply(t.getArray(),this._tr,this._tr)}clone(){const t=new g;for(let e=0;e<this._tr.length;e++)t._tr[e]=this._tr[e];return t}}!function(t){t.CubismMatrix44=g}(o||(o={}));class _{static create(){return null}static delete(t){}initialize(t){this._model=t}drawModel(){null!=this.getModel()&&(this.saveProfile(),this.doDrawModel(),this.restoreProfile())}setMvpMatrix(t){this._mvpMatrix4x4.setMatrix(t.getArray())}getMvpMatrix(){return this._mvpMatrix4x4}setModelColor(t,e,i,s){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),s<0?s=0:s>1&&(s=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=s}getModelColor(){return JSON.parse(JSON.stringify(this._modelColor))}setIsPremultipliedAlpha(t){this._isPremultipliedAlpha=t}isPremultipliedAlpha(){return this._isPremultipliedAlpha}setIsCulling(t){this._isCulling=t}isCulling(){return this._isCulling}setAnisotropy(t){this._anisotropy=t}getAnisotropy(){return this._anisotropy}getModel(){return this._model}useHighPrecisionMask(t){this._useHighPrecisionMask=t}isUsingHighPrecisionMask(){return this._useHighPrecisionMask}constructor(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisotropy=0,this._model=null,this._modelColor=new m,this._useHighPrecisionMask=!1,this._mvpMatrix4x4=new g,this._mvpMatrix4x4.loadIdentity()}}!function(t){t[t.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",t[t.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",t[t.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative"}(l||(l={}));class m{constructor(){this.R=1,this.G=1,this.B=1,this.A=1}}!function(t){t.CubismBlendMode=l,t.CubismRenderer=_,t.CubismTextureColor=m}(u||(u={}));const p=(t,e,i)=>{((t,e,i)=>{B.print(t,"[CSM]"+e,i)})(t,e+"\n",i)},f=t=>{console.assert(t)};let y,S,x,C,b;y=(t,...e)=>{p($.LogLevel_Verbose,"[V]"+t,e)},S=(t,...e)=>{p($.LogLevel_Debug,"[D]"+t,e)},x=(t,...e)=>{p($.LogLevel_Info,"[I]"+t,e)},C=(t,...e)=>{p($.LogLevel_Warning,"[W]"+t,e)},b=(t,...e)=>{p($.LogLevel_Error,"[E]"+t,e)};class B{static print(t,e,i){if(t<W.getLoggingLevel())return;const s=W.coreLogFunction;s&&s(e.replace(/\{(\d+)\}/g,((t,e)=>i[e])))}static dumpBytes(t,e,i){for(let s=0;s<i;s++)s%16==0&&s>0?this.print(t,"\n"):s%8==0&&s>0&&this.print(t,"  "),this.print(t,"{0} ",[255&e[s]]);this.print(t,"\n")}constructor(){}}var w,P;!function(t){t.CubismDebug=B}(w||(w={}));class v{constructor(t,e){this.first=null==t?null:t,this.second=null==e?null:e}}class M{constructor(t){null!=t?t<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._dummyValue=null,this._size=0)}release(){this.clear()}appendKey(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new v(t),this._size+=1}getValue(t){let e=-1;for(let i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)}setValue(t,e){let i=-1;for(let e=0;e<this._size;e++)if(this._keyValues[e].first==t){i=e;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)}isExist(t){for(let e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1}clear(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0}getSize(){return this._size}prepareCapacity(t,e){t>this._keyValues.length&&(0==this._keyValues.length?(!e&&t<M.DefaultSize&&(t=M.DefaultSize),this._keyValues.length=t):(!e&&t<2*this._keyValues.length&&(t=2*this._keyValues.length),this._keyValues.length=t))}begin(){return new T(this,0)}end(){return new T(this,this._size)}erase(t){const e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new T(this,e))}dumpAsInt(){for(let t=0;t<this._size;t++)S("{0} ,",this._keyValues[t]),S("\n")}}M.DefaultSize=10;class T{constructor(t,e){this._map=null!=t?t:new M,this._index=null!=e?e:0}set(t){return this._index=t._index,this._map=t._map,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new T(this._map,this._index++)}decrement(){const t=new T(this._map,this._index);return this._map=t._map,this._index=t._index,this}ptr(){return this._map._keyValues[this._index]}notEqual(t){return this._index!=t._index||this._map!=t._map}}!function(t){t.csmMap=M,t.csmPair=v,t.iterator=T}(P||(P={}));class E{static parseJsonObject(t,e){return Object.keys(t).forEach((i=>{"boolean"==typeof t[i]?e.put(i,new A(t[i])):"string"==typeof t[i]?e.put(i,new L(t[i])):"number"==typeof t[i]?e.put(i,new V(t[i])):t[i]instanceof Array?e.put(i,E.parseJsonArray(t[i])):t[i]instanceof Object?e.put(i,E.parseJsonObject(t[i],new N)):null==t[i]?e.put(i,new k):e.put(i,t[i])})),e}static parseJsonArray(t){const e=new O;return Object.keys(t).forEach((i=>{const s=Number(i);if("number"==typeof s)"boolean"==typeof t[s]?e.add(new A(t[s])):"string"==typeof t[s]?e.add(new L(t[s])):"number"==typeof t[s]?e.add(new V(t[s])):t[i]instanceof Array?e.add(this.parseJsonArray(t[i])):t[i]instanceof Object?e.add(this.parseJsonObject(t[i],new N)):null==t[i]?e.add(new k):e.add(t[i]);else if(t[i]instanceof Array)e.add(this.parseJsonArray(t[i]));else if(t[i]instanceof Object)e.add(this.parseJsonObject(t[i],new N));else if(null==t[i])e.add(new k);else for(let s=0;s<t[i].length;s++)e.add(t[i][s])})),e}}const I="Error: type mismatch";class R{constructor(){}getRawString(t,e){return this.getString(t,e)}toInt(t=0){return t}toFloat(t=0){return t}toBoolean(t=!1){return t}getSize(){return 0}getArray(t=null){return t}getVector(e=new t){return e}getMap(t){return t}getValueByIndex(t){return R.errorValue.setErrorNotForClientCall(I)}getValueByString(t){return R.nullValue.setErrorNotForClientCall(I)}getKeys(){return R.s_dummyKeys}isError(){return!1}isNull(){return!1}isBool(){return!1}isFloat(){return!1}isString(){return!1}isArray(){return!1}isMap(){return!1}equals(t){return!1}isStatic(){return!1}setErrorNotForClientCall(t){return D.errorValue}static staticInitializeNotForClientCall(){A.trueValue=new A(!0),A.falseValue=new A(!1),R.errorValue=new D("ERROR",!0),R.nullValue=new k,R.s_dummyKeys=new t}static staticReleaseNotForClientCall(){A.trueValue=null,A.falseValue=null,R.errorValue=null,R.nullValue=null,R.s_dummyKeys=null}}class F{constructor(t,e){this._parseCallback=E.parseJsonObject,this._error=null,this._lineCount=0,this._root=null,null!=t&&this.parseBytes(t,e,this._parseCallback)}static create(t,e){const i=new F;return i.parseBytes(t,e,i._parseCallback)?i:(F.delete(i),null)}static delete(t){}getRoot(){return this._root}static arrayBufferToString(t){const e=new Uint8Array(t);let i="";for(let t=0,s=e.length;t<s;++t)i+="%"+this.pad(e[t].toString(16));return i=decodeURIComponent(i),i}static pad(t){return t.length<2?"0"+t:t}parseBytes(t,e,i){const s=new Array(1),r=F.arrayBufferToString(t);if(this._root=null==i?this.parseValue(r,e,0,s):i(JSON.parse(r),new N),this._error){let t="\0";return t="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new L(t),x("{0}",this._root.getRawString()),!1}return null!=this._root||(this._root=new D(new h(this._error),!1),!1)}getParseError(){return this._error}checkEndOfFile(){return this._root.getArray()[1].equals("EOF")}parseValue(t,e,i,s){if(this._error)return null;let r,a=null,n=i;for(;n<e;n++)switch(t[n]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":{const e=new Array(1);return r=z(t.slice(n),e),s[0]=t.indexOf(e[0]),new V(r)}case'"':return new L(this.parseString(t,e,n+1,s));case"[":return a=this.parseArray(t,e,n+1,s),a;case"{":return a=this.parseObject(t,e,n+1,s),a;case"n":return n+3<e?(a=new k,s[0]=n+4):this._error="parse null",a;case"t":return n+3<e?(a=A.trueValue,s[0]=n+4):this._error="parse true",a;case"f":return n+4<e?(a=A.falseValue,s[0]=n+5):this._error="illegal ',' position",a;case",":return this._error="illegal ',' position",null;case"]":return s[0]=n,null;case"\n":this._lineCount++}return this._error="illegal end of value",null}parseString(t,e,i,s){if(this._error)return null;let r,a,n=i;const o=new h("");let l=i;for(;n<e;n++)switch(r=t[n],r){case'"':return s[0]=n+1,o.append(t.slice(l),n-l),o.s;case"//":if(n++,n-1>l&&o.append(t.slice(l),n-l),l=n+1,n<e)switch(a=t[n],a){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null}parseObject(t,e,i,s){if(this._error)return null;const r=new N;let a="",n=i,o="";const l=Array(1);let u=!1;for(;n<e;n++){t:for(;n<e;n++)switch(o=t[n],o){case'"':if(a=this.parseString(t,e,n+1,l),this._error)return null;n=l[0],u=!0;break t;case"}":return s[0]=n+1,r;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;t:for(;n<e;n++)switch(o=t[n],o){case":":u=!0,n++;break t;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;const i=this.parseValue(t,e,n,l);if(this._error)return null;n=l[0],r.put(a,i);t:for(;n<e;n++)switch(o=t[n],o){case",":break t;case"}":return s[0]=n+1,r;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null}parseArray(t,e,i,s){if(this._error)return null;let r,a=new O,n=i;const o=new Array(1);for(;n<e;n++){const i=this.parseValue(t,e,n,o);if(this._error)return null;n=o[0],i&&a.add(i);t:for(;n<e;n++)switch(r=t[n],r){case",":break t;case"]":return s[0]=n+1,a;case"\n":++this._lineCount}}return a=void 0,this._error="illegal end of parseObject",null}}class V extends R{constructor(t){super(),this._value=t}isFloat(){return!0}getString(t,e){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer}toInt(t=0){return parseInt(this._value.toString())}toFloat(t=0){return this._value}equals(t){return"number"==typeof t&&!Math.round(t)&&t==this._value}}class A extends R{isBool(){return!0}toBoolean(t=!1){return this._boolValue}getString(t,e){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer}equals(t){return"boolean"==typeof t&&t==this._boolValue}isStatic(){return!0}constructor(t){super(),this._boolValue=t}}class L extends R{constructor(t){super(),"string"==typeof t&&(this._stringBuffer=t),t instanceof h&&(this._stringBuffer=t.s)}isString(){return!0}getString(t,e){return this._stringBuffer}equals(t){return"string"==typeof t?this._stringBuffer==t:t instanceof h&&this._stringBuffer==t.s}}class D extends L{isStatic(){return this._isStatic}setErrorNotForClientCall(t){return this._stringBuffer=t,this}constructor(t,e){super(t),this._isStatic=e}isError(){return!0}}class k extends R{isNull(){return!0}getString(t,e){return this._stringBuffer}isStatic(){return!0}setErrorNotForClientCall(t){return this._stringBuffer=t,D.nullValue}constructor(){super(),this._stringBuffer="NullValue"}}class O extends R{constructor(){super(),this._array=new t}release(){for(let t=this._array.begin();t.notEqual(this._array.end());t.preIncrement()){let e=t.ptr();e&&!e.isStatic()&&(e=void 0,e=null)}}isArray(){return!0}getValueByIndex(t){if(t<0||this._array.getSize()<=t)return R.errorValue.setErrorNotForClientCall("Error: index out of bounds");const e=this._array.at(t);return null==e?R.nullValue:e}getValueByString(t){return R.errorValue.setErrorNotForClientCall(I)}getString(t,e){const i=e+"[\n";for(let t=this._array.begin();t.notEqual(this._array.end());t.increment()){const i=t.ptr();this._stringBuffer+=e+""+i.getString(e+" ")+"\n"}return this._stringBuffer=i+e+"]\n",this._stringBuffer}add(t){this._array.pushBack(t)}getVector(t=null){return this._array}getSize(){return this._array.getSize()}}class N extends R{constructor(){super(),this._map=new M}release(){const t=this._map.begin();for(;t.notEqual(this._map.end());){let e=t.ptr().second;e&&!e.isStatic()&&(e=void 0,e=null),t.preIncrement()}}isMap(){return!0}getValueByString(t){if(t instanceof h){const e=this._map.getValue(t.s);return null==e?R.nullValue:e}for(let e=this._map.begin();e.notEqual(this._map.end());e.preIncrement())if(e.ptr().first==t)return null==e.ptr().second?R.nullValue:e.ptr().second;return R.nullValue}getValueByIndex(t){return R.errorValue.setErrorNotForClientCall(I)}getString(t,e){this._stringBuffer=e+"{\n";const i=this._map.begin();for(;i.notEqual(this._map.end());){const t=i.ptr().first,s=i.ptr().second;this._stringBuffer+=e+" "+t+" : "+s.getString(e+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=e+"}\n",this._stringBuffer}getMap(t){return this._map}put(t,e){this._map.setValue(t,e)}getKeys(){if(!this._keys){this._keys=new t;const e=this._map.begin();for(;e.notEqual(this._map.end());){const t=e.ptr().first;this._keys.pushBack(t),e.preIncrement()}}return this._keys}getSize(){return this._keys.getSize()}}var U;function z(t,e){let i=0;for(let e=1;;e++){const s=t.slice(e-1,e);if("e"==s||"-"==s||"E"==s)continue;const r=t.substring(0,e),a=Number(r);if(isNaN(a))break;i=e}let s=parseFloat(t);return isNaN(s)&&(s=NaN),e[0]=t.slice(i),s}!function(t){t.CubismJson=F,t.JsonArray=O,t.JsonBoolean=A,t.JsonError=D,t.JsonFloat=V,t.JsonMap=N,t.JsonNullvalue=k,t.JsonString=L,t.Value=R}(U||(U={}));let j=!1,X=!1,q=null,G=null;const Y=Object.freeze({vertexOffset:0,vertexStep:2});function H(t){t&&(t=void 0)}class W{static startUp(t=null){if(j)return x("CubismFramework.startUp() is already done."),j;if(q=t,null!=q&&Live2DCubismCore.Logging.csmSetLogFunction(q.logFunction),j=!0,j){const t=Live2DCubismCore.Version.csmGetVersion(),e=(16711680&t)>>16,i=65535&t,s=t;x("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+((4278190080&t)>>24)).slice(-2),("00"+e).slice(-2),("0000"+i).slice(-4),s)}return x("CubismFramework.startUp() is complete."),j}static cleanUp(){j=!1,X=!1,q=null,G=null}static initialize(t=0){f(j),j?X?C("CubismFramework.initialize() skipped, already initialized."):(R.staticInitializeNotForClientCall(),G=new d,Live2DCubismCore.Memory.initializeAmountOfMemory(t),X=!0,x("CubismFramework.initialize() is complete.")):C("CubismFramework is not started.")}static dispose(){f(j),j?X?(R.staticReleaseNotForClientCall(),G.release(),G=null,_.staticRelease(),X=!1,x("CubismFramework.dispose() is complete.")):C("CubismFramework.dispose() skipped, not initialized."):C("CubismFramework is not started.")}static isStarted(){return j}static isInitialized(){return X}static coreLogFunction(t){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(t)}static getLoggingLevel(){return null!=q?q.loggingLevel:$.LogLevel_Off}static getIdManager(){return G}constructor(){}}class J{}var $,K;!function(t){t[t.LogLevel_Verbose=0]="LogLevel_Verbose",t[t.LogLevel_Debug=1]="LogLevel_Debug",t[t.LogLevel_Info=2]="LogLevel_Info",t[t.LogLevel_Warning=3]="LogLevel_Warning",t[t.LogLevel_Error=4]="LogLevel_Error",t[t.LogLevel_Off=5]="LogLevel_Off"}($||($={})),function(t){t.Constant=Y,t.csmDelete=H,t.CubismFramework=W}(K||(K={}));const Z=["atri"],Q=Z.length,tt=$.LogLevel_Verbose;var et="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==et&&et,it="URLSearchParams"in et,st="Symbol"in et&&"iterator"in Symbol,rt="FileReader"in et&&"Blob"in et&&function(){try{return new Blob,!0}catch(t){return!1}}(),at="FormData"in et,nt="ArrayBuffer"in et;if(nt)var ot=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],lt=ArrayBuffer.isView||function(t){return t&&ot.indexOf(Object.prototype.toString.call(t))>-1};function ut(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(t)||""===t)throw new TypeError('Invalid character in header field name: "'+t+'"');return t.toLowerCase()}function ht(t){return"string"!=typeof t&&(t=String(t)),t}function ct(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return st&&(e[Symbol.iterator]=function(){return e}),e}function dt(t){this.map={},t instanceof dt?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function gt(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function _t(t){return new Promise((function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}}))}function mt(t){var e=new FileReader,i=_t(e);return e.readAsArrayBuffer(t),i}function pt(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function ft(){return this.bodyUsed=!1,this._initBody=function(t){var e;this.bodyUsed=this.bodyUsed,this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:rt&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:at&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:it&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():nt&&rt&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=pt(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):nt&&(ArrayBuffer.prototype.isPrototypeOf(t)||lt(t))?this._bodyArrayBuffer=pt(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):it&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},rt&&(this.blob=function(){var t=gt(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?gt(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(mt)}),this.text=function(){var t,e,i,s=gt(this);if(s)return s;if(this._bodyBlob)return t=this._bodyBlob,i=_t(e=new FileReader),e.readAsText(t),i;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),s=0;s<e.length;s++)i[s]=String.fromCharCode(e[s]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},at&&(this.formData=function(){return this.text().then(xt)}),this.json=function(){return this.text().then(JSON.parse)},this}dt.prototype.append=function(t,e){t=ut(t),e=ht(e);var i=this.map[t];this.map[t]=i?i+", "+e:e},dt.prototype.delete=function(t){delete this.map[ut(t)]},dt.prototype.get=function(t){return t=ut(t),this.has(t)?this.map[t]:null},dt.prototype.has=function(t){return this.map.hasOwnProperty(ut(t))},dt.prototype.set=function(t,e){this.map[ut(t)]=ht(e)},dt.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},dt.prototype.keys=function(){var t=[];return this.forEach((function(e,i){t.push(i)})),ct(t)},dt.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),ct(t)},dt.prototype.entries=function(){var t=[];return this.forEach((function(e,i){t.push([i,e])})),ct(t)},st&&(dt.prototype[Symbol.iterator]=dt.prototype.entries);var yt=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function St(t,e){if(!(this instanceof St))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,s,r=(e=e||{}).body;if(t instanceof St){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new dt(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new dt(e.headers)),this.method=(s=(i=e.method||this.method||"GET").toUpperCase(),yt.indexOf(s)>-1?s:i),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(r),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==e.cache&&"no-cache"!==e.cache)){var a=/([?&])_=[^&]*/;a.test(this.url)?this.url=this.url.replace(a,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function xt(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var i=t.split("="),s=i.shift().replace(/\+/g," "),r=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(s),decodeURIComponent(r))}})),e}function Ct(t,e){if(!(this instanceof Ct))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===e.statusText?"":""+e.statusText,this.headers=new dt(e.headers),this.url=e.url||"",this._initBody(t)}St.prototype.clone=function(){return new St(this,{body:this._bodyInit})},ft.call(St.prototype),ft.call(Ct.prototype),Ct.prototype.clone=function(){return new Ct(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new dt(this.headers),url:this.url})},Ct.error=function(){var t=new Ct(null,{status:0,statusText:""});return t.type="error",t};var bt=[301,302,303,307,308];Ct.redirect=function(t,e){if(-1===bt.indexOf(e))throw new RangeError("Invalid status code");return new Ct(null,{status:e,headers:{location:t}})};var Bt=et.DOMException;try{new Bt}catch(t){(Bt=function(t,e){this.message=t,this.name=e;var i=Error(t);this.stack=i.stack}).prototype=Object.create(Error.prototype),Bt.prototype.constructor=Bt}function wt(t,e){return new Promise((function(i,s){var r=new St(t,e);if(r.signal&&r.signal.aborted)return s(new Bt("Aborted","AbortError"));var a=new XMLHttpRequest;function n(){a.abort()}a.onload=function(){var t,e,s={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new dt,t.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(t){return 0===t.indexOf("\n")?t.substr(1,t.length):t})).forEach((function(t){var i=t.split(":"),s=i.shift().trim();if(s){var r=i.join(":").trim();e.append(s,r)}})),e)};s.url="responseURL"in a?a.responseURL:s.headers.get("X-Request-URL");var r="response"in a?a.response:a.responseText;setTimeout((function(){i(new Ct(r,s))}),0)},a.onerror=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},a.ontimeout=function(){setTimeout((function(){s(new TypeError("Network request failed"))}),0)},a.onabort=function(){setTimeout((function(){s(new Bt("Aborted","AbortError"))}),0)},a.open(r.method,function(t){try{return""===t&&et.location.href?et.location.href:t}catch(e){return t}}(r.url),!0),"include"===r.credentials?a.withCredentials=!0:"omit"===r.credentials&&(a.withCredentials=!1),"responseType"in a&&(rt?a.responseType="blob":nt&&r.headers.get("Content-Type")&&-1!==r.headers.get("Content-Type").indexOf("application/octet-stream")&&(a.responseType="arraybuffer")),!e||"object"!=typeof e.headers||e.headers instanceof dt?r.headers.forEach((function(t,e){a.setRequestHeader(e,t)})):Object.getOwnPropertyNames(e.headers).forEach((function(t){a.setRequestHeader(t,ht(e.headers[t]))})),r.signal&&(r.signal.addEventListener("abort",n),a.onreadystatechange=function(){4===a.readyState&&r.signal.removeEventListener("abort",n)}),a.send(void 0===r._bodyInit?null:r._bodyInit)}))}wt.polyfill=!0,et.fetch||(et.fetch=wt,et.Headers=dt,et.Request=St,et.Response=Ct);const Pt=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var vt,Mt;!function(t){t.HitAreaBody=Pt.HitAreaBody,t.HitAreaHead=Pt.HitAreaHead,t.HitAreaPrefix=Pt.HitAreaPrefix,t.ParamAngleX=Pt.ParamAngleX,t.ParamAngleY=Pt.ParamAngleY,t.ParamAngleZ=Pt.ParamAngleZ,t.ParamArmLA=Pt.ParamArmLA,t.ParamArmLB=Pt.ParamArmLB,t.ParamArmRA=Pt.ParamArmRA,t.ParamArmRB=Pt.ParamArmRB,t.ParamBaseX=Pt.ParamBaseX,t.ParamBaseY=Pt.ParamBaseY,t.ParamBodyAngleX=Pt.ParamBodyAngleX,t.ParamBodyAngleY=Pt.ParamBodyAngleY,t.ParamBodyAngleZ=Pt.ParamBodyAngleZ,t.ParamBreath=Pt.ParamBreath,t.ParamBrowLAngle=Pt.ParamBrowLAngle,t.ParamBrowLForm=Pt.ParamBrowLForm,t.ParamBrowLX=Pt.ParamBrowLX,t.ParamBrowLY=Pt.ParamBrowLY,t.ParamBrowRAngle=Pt.ParamBrowRAngle,t.ParamBrowRForm=Pt.ParamBrowRForm,t.ParamBrowRX=Pt.ParamBrowRX,t.ParamBrowRY=Pt.ParamBrowRY,t.ParamBustX=Pt.ParamBustX,t.ParamBustY=Pt.ParamBustY,t.ParamCheek=Pt.ParamCheek,t.ParamEyeBallForm=Pt.ParamEyeBallForm,t.ParamEyeBallX=Pt.ParamEyeBallX,t.ParamEyeBallY=Pt.ParamEyeBallY,t.ParamEyeLOpen=Pt.ParamEyeLOpen,t.ParamEyeLSmile=Pt.ParamEyeLSmile,t.ParamEyeROpen=Pt.ParamEyeROpen,t.ParamEyeRSmile=Pt.ParamEyeRSmile,t.ParamHairBack=Pt.ParamHairBack,t.ParamHairFluffy=Pt.ParamHairFluffy,t.ParamHairFront=Pt.ParamHairFront,t.ParamHairSide=Pt.ParamHairSide,t.ParamHandL=Pt.ParamHandL,t.ParamHandR=Pt.ParamHandR,t.ParamMouthForm=Pt.ParamMouthForm,t.ParamMouthOpenY=Pt.ParamMouthOpenY,t.ParamNONE=Pt.ParamNONE,t.ParamShoulderY=Pt.ParamShoulderY,t.PartsArmLPrefix=Pt.PartsArmLPrefix,t.PartsArmPrefix=Pt.PartsArmPrefix,t.PartsArmRPrefix=Pt.PartsArmRPrefix,t.PartsIdCore=Pt.PartsIdCore}(vt||(vt={}));class Tt{}!function(t){t.ICubismModelSetting=Tt}(Mt||(Mt={}));const Et="FileReferences",It="UserData",Rt="Name",Ft="File",Vt="Ids",At="Sound",Lt="FadeInTime",Dt="FadeOutTime",kt="LipSync",Ot="EyeBlink";var Nt,Ut,zt,jt,Xt;!function(t){t[t.FrequestNode_Groups=0]="FrequestNode_Groups",t[t.FrequestNode_Moc=1]="FrequestNode_Moc",t[t.FrequestNode_Motions=2]="FrequestNode_Motions",t[t.FrequestNode_Expressions=3]="FrequestNode_Expressions",t[t.FrequestNode_Textures=4]="FrequestNode_Textures",t[t.FrequestNode_Physics=5]="FrequestNode_Physics",t[t.FrequestNode_Pose=6]="FrequestNode_Pose",t[t.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(Nt||(Nt={}));class qt extends Tt{constructor(e,i){super(),this._json=F.create(e,i),this._json&&(this._jsonValue=new t,this._jsonValue.pushBack(this._json.getRoot().getValueByString("Groups")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Moc")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Motions")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Expressions")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Textures")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Physics")),this._jsonValue.pushBack(this._json.getRoot().getValueByString(Et).getValueByString("Pose")),this._jsonValue.pushBack(this._json.getRoot().getValueByString("HitAreas")))}release(){F.delete(this._json),this._jsonValue=null}GetJson(){return this._json}getModelFileName(){return this.isExistModelFile()?this._jsonValue.at(Nt.FrequestNode_Moc).getRawString():""}getTextureCount(){return this.isExistTextureFiles()?this._jsonValue.at(Nt.FrequestNode_Textures).getSize():0}getTextureDirectory(){const t=this._jsonValue.at(Nt.FrequestNode_Textures).getValueByIndex(0).getRawString().split("/"),e=t.length-1;let i="";for(let s=0;s<e;s++)i+=t[s],s<e-1&&(i+="/");return i}getTextureFileName(t){return this._jsonValue.at(Nt.FrequestNode_Textures).getValueByIndex(t).getRawString()}getHitAreasCount(){return this.isExistHitAreas()?this._jsonValue.at(Nt.FrequestNode_HitAreas).getSize():0}getHitAreaId(t){return W.getIdManager().getId(this._jsonValue.at(Nt.FrequestNode_HitAreas).getValueByIndex(t).getValueByString("Id").getRawString())}getHitAreaName(t){return this._jsonValue.at(Nt.FrequestNode_HitAreas).getValueByIndex(t).getValueByString(Rt).getRawString()}getPhysicsFileName(){return this.isExistPhysicsFile()?this._jsonValue.at(Nt.FrequestNode_Physics).getRawString():""}getPoseFileName(){return this.isExistPoseFile()?this._jsonValue.at(Nt.FrequestNode_Pose).getRawString():""}getExpressionCount(){return this.isExistExpressionFile()?this._jsonValue.at(Nt.FrequestNode_Expressions).getSize():0}getExpressionName(t){return this._jsonValue.at(Nt.FrequestNode_Expressions).getValueByIndex(t).getValueByString(Rt).getRawString()}getExpressionFileName(t){return this._jsonValue.at(Nt.FrequestNode_Expressions).getValueByIndex(t).getValueByString(Ft).getRawString()}getMotionGroupCount(){return this.isExistMotionGroups()?this._jsonValue.at(Nt.FrequestNode_Motions).getKeys().getSize():0}getMotionGroupName(t){return this.isExistMotionGroups()?this._jsonValue.at(Nt.FrequestNode_Motions).getKeys().at(t):null}getMotionCount(t){return this.isExistMotionGroupName(t)?this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getSize():0}getMotionFileName(t,e){return this.isExistMotionGroupName(t)?this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(Ft).getRawString():""}getMotionSoundFileName(t,e){return this.isExistMotionSoundFile(t,e)?this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(At).getRawString():""}getMotionFadeInTimeValue(t,e){return this.isExistMotionFadeIn(t,e)?this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(Lt).toFloat():-1}getMotionFadeOutTimeValue(t,e){return this.isExistMotionFadeOut(t,e)?this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(Dt).toFloat():-1}getUserDataFile(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(Et).getValueByString(It).getRawString():""}getLayoutMap(t){const e=this._json.getRoot().getValueByString("Layout").getMap();if(null==e)return!1;let i=!1;for(const s=e.begin();s.notEqual(e.end());s.preIncrement())t.setValue(s.ptr().first,s.ptr().second.toFloat()),i=!0;return i}getEyeBlinkParameterCount(){if(!this.isExistEyeBlinkParameters())return 0;let t=0;for(let e=0;e<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();e++){const i=this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(Rt).getRawString()==Ot){t=i.getValueByString(Vt).getVector().getSize();break}}return t}getEyeBlinkParameterId(t){if(!this.isExistEyeBlinkParameters())return null;for(let e=0;e<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();e++){const i=this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(Rt).getRawString()==Ot)return W.getIdManager().getId(i.getValueByString(Vt).getValueByIndex(t).getRawString())}return null}getLipSyncParameterCount(){if(!this.isExistLipSyncParameters())return 0;let t=0;for(let e=0;e<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();e++){const i=this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(Rt).getRawString()==kt){t=i.getValueByString(Vt).getVector().getSize();break}}return t}getLipSyncParameterId(t){if(!this.isExistLipSyncParameters())return null;for(let e=0;e<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();e++){const i=this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(e);if(!i.isNull()&&!i.isError()&&i.getValueByString(Rt).getRawString()==kt)return W.getIdManager().getId(i.getValueByString(Vt).getValueByIndex(t).getRawString())}return null}isExistModelFile(){const t=this._jsonValue.at(Nt.FrequestNode_Moc);return!t.isNull()&&!t.isError()}isExistTextureFiles(){const t=this._jsonValue.at(Nt.FrequestNode_Textures);return!t.isNull()&&!t.isError()}isExistHitAreas(){const t=this._jsonValue.at(Nt.FrequestNode_HitAreas);return!t.isNull()&&!t.isError()}isExistPhysicsFile(){const t=this._jsonValue.at(Nt.FrequestNode_Physics);return!t.isNull()&&!t.isError()}isExistPoseFile(){const t=this._jsonValue.at(Nt.FrequestNode_Pose);return!t.isNull()&&!t.isError()}isExistExpressionFile(){const t=this._jsonValue.at(Nt.FrequestNode_Expressions);return!t.isNull()&&!t.isError()}isExistMotionGroups(){const t=this._jsonValue.at(Nt.FrequestNode_Motions);return!t.isNull()&&!t.isError()}isExistMotionGroupName(t){const e=this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t);return!e.isNull()&&!e.isError()}isExistMotionSoundFile(t,e){const i=this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(At);return!i.isNull()&&!i.isError()}isExistMotionFadeIn(t,e){const i=this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(Lt);return!i.isNull()&&!i.isError()}isExistMotionFadeOut(t,e){const i=this._jsonValue.at(Nt.FrequestNode_Motions).getValueByString(t).getValueByIndex(e).getValueByString(Dt);return!i.isNull()&&!i.isError()}isExistUserDataFile(){const t=this._json.getRoot().getValueByString(Et).getValueByString(It);return!t.isNull()&&!t.isError()}isExistEyeBlinkParameters(){if(this._jsonValue.at(Nt.FrequestNode_Groups).isNull()||this._jsonValue.at(Nt.FrequestNode_Groups).isError())return!1;for(let t=0;t<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(t).getValueByString(Rt).getRawString()==Ot)return!0;return!1}isExistLipSyncParameters(){if(this._jsonValue.at(Nt.FrequestNode_Groups).isNull()||this._jsonValue.at(Nt.FrequestNode_Groups).isError())return!1;for(let t=0;t<this._jsonValue.at(Nt.FrequestNode_Groups).getSize();++t)if(this._jsonValue.at(Nt.FrequestNode_Groups).getValueByIndex(t).getValueByString(Rt).getRawString()==kt)return!0;return!1}}!function(t){t.CubismModelSettingJson=qt}(Ut||(Ut={}));class Gt{static create(){return new Gt}static delete(t){null!=t&&(t=null)}setParameters(t){this._breathParameters=t}getParameters(){return this._breathParameters}updateParameters(t,e){this._currentTime+=e;const i=2*this._currentTime*3.14159;for(let e=0;e<this._breathParameters.getSize();++e){const s=this._breathParameters.at(e);t.addParameterValueById(s.parameterId,s.offset+s.peak*Math.sin(i/s.cycle),s.weight)}}constructor(){this._currentTime=0}}class Yt{constructor(t,e,i,s,r){this.parameterId=null==t?null:t,this.offset=null==e?0:e,this.peak=null==i?0:i,this.cycle=null==s?0:s,this.weight=null==r?0:r}}!function(t){t.BreathParameterData=Yt,t.CubismBreath=Gt}(zt||(zt={}));class Ht{static create(t=null){return new Ht(t)}static delete(t){null!=t&&(t=null)}setBlinkingInterval(t){this._blinkingIntervalSeconds=t}setBlinkingSetting(t,e,i){this._closingSeconds=t,this._closedSeconds=e,this._openingSeconds=i}setParameterIds(t){this._parameterIds=t}getParameterIds(){return this._parameterIds}updateParameters(t,e){let i;this._userTimeSeconds+=e;let s=0;switch(this._blinkingState){case jt.EyeState_Closing:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds,s>=1&&(s=1,this._blinkingState=jt.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),i=1-s;break;case jt.EyeState_Closed:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds,s>=1&&(this._blinkingState=jt.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),i=0;break;case jt.EyeState_Opening:s=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds,s>=1&&(s=1,this._blinkingState=jt.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),i=s;break;case jt.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=jt.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),i=1;break;case jt.EyeState_First:default:this._blinkingState=jt.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),i=1}Ht.CloseIfZero||(i=-i);for(let e=0;e<this._parameterIds.getSize();++e)t.setParameterValueById(this._parameterIds.at(e),i)}constructor(e){if(this._blinkingState=jt.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new t,null!=e)for(let t=0;t<e.getEyeBlinkParameterCount();++t)this._parameterIds.pushBack(e.getEyeBlinkParameterId(t))}determinNextBlinkingTiming(){const t=Math.random();return this._userTimeSeconds+t*(2*this._blinkingIntervalSeconds-1)}}Ht.CloseIfZero=!0,function(t){t[t.EyeState_First=0]="EyeState_First",t[t.EyeState_Interval=1]="EyeState_Interval",t[t.EyeState_Closing=2]="EyeState_Closing",t[t.EyeState_Closed=3]="EyeState_Closed",t[t.EyeState_Opening=4]="EyeState_Opening"}(jt||(jt={})),function(t){t.CubismEyeBlink=Ht,t.EyeState=jt}(Xt||(Xt={}));const Wt="FadeInTime",Jt="Link";class $t{static create(t,e){const i=new $t,s=F.create(t,e),r=s.getRoot();r.getValueByString(Wt).isNull()||(i._fadeTimeSeconds=r.getValueByString(Wt).toFloat(.5),i._fadeTimeSeconds<=0&&(i._fadeTimeSeconds=.5));const a=r.getValueByString("Groups"),n=a.getSize();for(let t=0;t<n;++t){const e=a.getValueByIndex(t),s=e.getSize();let r=0;for(let t=0;t<s;++t){const s=e.getValueByIndex(t),a=new Kt,n=W.getIdManager().getId(s.getValueByString("Id").getRawString());if(a.partId=n,!s.getValueByString(Jt).isNull()){const t=s.getValueByString(Jt),e=t.getSize();for(let i=0;i<e;++i){const e=new Kt,s=W.getIdManager().getId(t.getValueByIndex(i).getString());e.partId=s,a.link.pushBack(e)}}i._partGroups.pushBack(a.clone()),++r}i._partGroupCounts.pushBack(r)}return F.delete(s),i}static delete(t){null!=t&&(t=null)}updateParameters(t,e){t!=this._lastModel&&this.reset(t),this._lastModel=t,e<0&&(e=0);let i=0;for(let s=0;s<this._partGroupCounts.getSize();s++){const r=this._partGroupCounts.at(s);this.doFade(t,e,i,r),i+=r}this.copyPartOpacities(t)}reset(t){let e=0;for(let i=0;i<this._partGroupCounts.getSize();++i){const s=this._partGroupCounts.at(i);for(let i=e;i<e+s;++i){this._partGroups.at(i).initialize(t);const s=this._partGroups.at(i).partIndex,r=this._partGroups.at(i).parameterIndex;if(!(s<0)){t.setPartOpacityByIndex(s,i==e?1:0),t.setParameterValueByIndex(r,i==e?1:0);for(let e=0;e<this._partGroups.at(i).link.getSize();++e)this._partGroups.at(i).link.at(e).initialize(t)}}e+=s}}copyPartOpacities(t){for(let e=0;e<this._partGroups.getSize();++e){const i=this._partGroups.at(e);if(0==i.link.getSize())continue;const s=this._partGroups.at(e).partIndex,r=t.getPartOpacityByIndex(s);for(let e=0;e<i.link.getSize();++e){const s=i.link.at(e).partIndex;s<0||t.setPartOpacityByIndex(s,r)}}}doFade(t,e,i,s){let r=-1,a=1;for(let n=i;n<i+s;++n){const i=this._partGroups.at(n).partIndex,s=this._partGroups.at(n).parameterIndex;if(t.getParameterValueByIndex(s)>.001){if(r>=0)break;r=n,a=t.getPartOpacityByIndex(i),a+=e/this._fadeTimeSeconds,a>1&&(a=1)}}r<0&&(r=0,a=1);for(let e=i;e<i+s;++e){const i=this._partGroups.at(e).partIndex;if(r==e)t.setPartOpacityByIndex(i,a);else{let e,s=t.getPartOpacityByIndex(i);e=a<.5?-.5*a/.5+1:.5*(1-a)/.5,(1-e)*(1-a)>.15&&(e=1-.15/(1-a)),s>e&&(s=e),t.setPartOpacityByIndex(i,s)}}}constructor(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new t,this._partGroupCounts=new t}}class Kt{constructor(e){if(this.parameterIndex=0,this.partIndex=0,this.link=new t,null!=e){this.partId=e.partId;for(const t=e.link.begin();t.notEqual(e.link.end());t.preIncrement())this.link.pushBack(t.ptr().clone())}}assignment(t){this.partId=t.partId;for(const e=t.link.begin();e.notEqual(t.link.end());e.preIncrement())this.link.pushBack(e.ptr().clone());return this}initialize(t){this.parameterIndex=t.getParameterIndex(this.partId),this.partIndex=t.getPartIndex(this.partId),t.setParameterValueByIndex(this.parameterIndex,1)}clone(){const e=new Kt;e.partId=this.partId,e.parameterIndex=this.parameterIndex,e.partIndex=this.partIndex,e.link=new t;for(let t=this.link.begin();t.notEqual(this.link.end());t.increment())e.link.pushBack(t.ptr().clone());return e}}var Zt,Qt,te,ee,ie,se;!function(t){t.CubismPose=$t,t.PartData=Kt}(Zt||(Zt={}));class re extends g{constructor(t,e){super(),this._width=void 0!==t?t:0,this._height=void 0!==e?e:0,this.setHeight(2)}setWidth(t){const e=t/this._width,i=e;this.scale(e,i)}setHeight(t){const e=t/this._height,i=e;this.scale(e,i)}setPosition(t,e){this.translate(t,e)}setCenterPosition(t,e){this.centerX(t),this.centerY(e)}top(t){this.setY(t)}bottom(t){const e=this._height*this.getScaleY();this.translateY(t-e)}left(t){this.setX(t)}right(t){const e=this._width*this.getScaleX();this.translateX(t-e)}centerX(t){const e=this._width*this.getScaleX();this.translateX(t-e/2)}setX(t){this.translateX(t)}centerY(t){const e=this._height*this.getScaleY();this.translateY(t-e/2)}setY(t){this.translateY(t)}setupFromLayout(t){for(const e=t.begin();e.notEqual(t.end());e.preIncrement()){const t=e.ptr().first,i=e.ptr().second;"width"==t?this.setWidth(i):"height"==t&&this.setHeight(i)}for(const e=t.begin();e.notEqual(t.end());e.preIncrement()){const t=e.ptr().first,i=e.ptr().second;"x"==t?this.setX(i):"y"==t?this.setY(i):"center_x"==t?this.centerX(i):"center_y"==t?this.centerY(i):"top"==t?this.top(i):"bottom"==t?this.bottom(i):"left"==t?this.left(i):"right"==t&&this.right(i)}}}!function(t){t.CubismModelMatrix=re}(Qt||(Qt={}));class ae{constructor(t,e){this.x=t,this.y=e,this.x=null==t?0:t,this.y=null==e?0:e}add(t){const e=new ae(0,0);return e.x=this.x+t.x,e.y=this.y+t.y,e}substract(t){const e=new ae(0,0);return e.x=this.x-t.x,e.y=this.y-t.y,e}multiply(t){const e=new ae(0,0);return e.x=this.x*t.x,e.y=this.y*t.y,e}multiplyByScaler(t){return this.multiply(new ae(t,t))}division(t){const e=new ae(0,0);return e.x=this.x/t.x,e.y=this.y/t.y,e}divisionByScalar(t){return this.division(new ae(t,t))}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}getDistanceWith(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))}dot(t){return this.x*t.x+this.y*t.y}normalize(){const t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t}isEqual(t){return this.x==t.x&&this.y==t.y}isNotEqual(t){return!this.isEqual(t)}}!function(t){t.CubismVector2=ae}(te||(te={}));class ne{static range(t,e,i){return t<e?t=e:t>i&&(t=i),t}static sin(t){return Math.sin(t)}static cos(t){return Math.cos(t)}static abs(t){return Math.abs(t)}static sqrt(t){return Math.sqrt(t)}static cbrt(t){if(0===t)return t;let e=t;const i=e<0;let s;return i&&(e=-e),e===1/0?s=1/0:(s=Math.exp(Math.log(e)/3),s=(e/(s*s)+2*s)/3),i?-s:s}static getEasingSine(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)}static max(t,e){return t>e?t:e}static min(t,e){return t>e?e:t}static degreesToRadian(t){return t/180*Math.PI}static radianToDegrees(t){return 180*t/Math.PI}static directionToRadian(t,e){let i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);for(;i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i}static directionToDegrees(t,e){const i=this.directionToRadian(t,e);let s=this.radianToDegrees(i);return e.x-t.x>0&&(s=-s),s}static radianToDirection(t){const e=new ae;return e.x=this.sin(t),e.y=this.cos(t),e}static quadraticEquation(t,e,i){return this.abs(t)<ne.Epsilon?this.abs(e)<ne.Epsilon?-i:-i/e:-(e+this.sqrt(e*e-4*t*i))/(2*t)}static cardanoAlgorithmForBezier(t,e,i,s){if(this.sqrt(t)<ne.Epsilon)return this.range(this.quadraticEquation(e,i,s),0,1);const r=e/t,a=i/t,n=(3*a-r*r)/3,o=n/3,l=(2*r*r*r-9*r*a+s/t*27)/27,u=l/2,h=u*u+o*o*o,c=.51;if(h<0){const t=-n/3,e=t*t*t,i=this.sqrt(e),s=-l/(2*i),a=this.range(s,-1,1),o=Math.acos(a),u=2*this.cbrt(i),h=u*this.cos(o/3)-r/3;if(this.abs(h-.5)<c)return this.range(h,0,1);const d=u*this.cos((o+2*Math.PI)/3)-r/3;if(this.abs(d-.5)<c)return this.range(d,0,1);const g=u*this.cos((o+4*Math.PI)/3)-r/3;return this.range(g,0,1)}if(0==h){let t;t=u<0?this.cbrt(-u):-this.cbrt(u);const e=2*t-r/3;if(this.abs(e-.5)<c)return this.range(e,0,1);const i=-t-r/3;return this.range(i,0,1)}const d=this.sqrt(h),g=this.cbrt(d-u)-this.cbrt(d+u)-r/3;return this.range(g,0,1)}constructor(){}}ne.Epsilon=1e-5,function(t){t.CubismMath=ne}(ee||(ee={}));class oe{constructor(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}update(t){this._userTimeSeconds+=t;const e=4/30;if(0==this._lastTimeSeconds)return void(this._lastTimeSeconds=this._userTimeSeconds);const i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;const s=i*e/4.5,r=this._faceTargetX-this._faceX,a=this._faceTargetY-this._faceY;if(ne.abs(r)<=.01&&ne.abs(a)<=.01)return;const n=ne.sqrt(r*r+a*a),o=e*a/n;let l=e*r/n-this._faceVX,u=o-this._faceVY;const h=ne.sqrt(l*l+u*u);(h<-s||h>s)&&(l*=s/h,u*=s/h),this._faceVX+=l,this._faceVY+=u;{const t=.5*(ne.sqrt(s*s+16*s*n-8*s*n)-s),e=ne.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);e>t&&(this._faceVX*=t/e,this._faceVY*=t/e)}this._faceX+=this._faceVX,this._faceY+=this._faceVY}getX(){return this._faceX}getY(){return this._faceY}set(t,e){this._faceTargetX=t,this._faceTargetY=e}}!function(t){t.CubismTargetPoint=oe}(ie||(ie={}));class le{static delete(t){t.release(),t=null}constructor(){this.setFinishedMotionHandler=t=>this._onFinishedMotion=t,this.getFinishedMotionHandler=()=>this._onFinishedMotion,this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new t}release(){this._weight=0}updateParameters(t,e,i){if(!e.isAvailable()||e.isFinished())return;if(!e.isStarted()){e.setIsStarted(!0),e.setStartTime(i-this._offsetSeconds),e.setFadeInStartTime(i);const t=this.getDuration();e.getEndTime()<0&&e.setEndTime(t<=0?-1:e.getStartTime()+t)}let s=this._weight;s=s*(0==this._fadeInSeconds?1:ne.getEasingSine((i-e.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||e.getEndTime()<0?1:ne.getEasingSine((e.getEndTime()-i)/this._fadeOutSeconds)),e.setState(i,s),f(0<=s&&s<=1),this.doUpdateParameters(t,i,s,e),e.getEndTime()>0&&e.getEndTime()<i&&e.setIsFinished(!0)}setFadeInTime(t){this._fadeInSeconds=t}setFadeOutTime(t){this._fadeOutSeconds=t}getFadeOutTime(){return this._fadeOutSeconds}getFadeInTime(){return this._fadeInSeconds}setWeight(t){this._weight=t}getWeight(){return this._weight}getDuration(){return-1}getLoopDuration(){return-1}setOffsetTime(t){this._offsetSeconds=t}getFiredEvent(t,e){return this._firedEventValues}}!function(t){t.ACubismMotion=le}(se||(se={}));const ue="Parameters",he="Blend";class ce extends le{static create(t,e){const i=new ce,s=F.create(t,e),r=s.getRoot();i.setFadeInTime(r.getValueByString("FadeInTime").toFloat(1)),i.setFadeOutTime(r.getValueByString("FadeOutTime").toFloat(1));const a=r.getValueByString(ue).getSize();i._parameters.prepareCapacity(a);for(let t=0;t<a;++t){const e=r.getValueByString(ue).getValueByIndex(t),s=W.getIdManager().getId(e.getValueByString("Id").getRawString()),a=e.getValueByString("Value").toFloat();let n;n=e.getValueByString(he).isNull()||"Add"==e.getValueByString(he).getString()?de.ExpressionBlendType_Add:"Multiply"==e.getValueByString(he).getString()?de.ExpressionBlendType_Multiply:"Overwrite"==e.getValueByString(he).getString()?de.ExpressionBlendType_Overwrite:de.ExpressionBlendType_Add;const o=new fe;o.parameterId=s,o.blendType=n,o.value=a,i._parameters.pushBack(o)}return F.delete(s),i}doUpdateParameters(t,e,i,s){for(let e=0;e<this._parameters.getSize();++e){const s=this._parameters.at(e);switch(s.blendType){case de.ExpressionBlendType_Add:t.addParameterValueById(s.parameterId,s.value,i);break;case de.ExpressionBlendType_Multiply:t.multiplyParameterValueById(s.parameterId,s.value,i);break;case de.ExpressionBlendType_Overwrite:t.setParameterValueById(s.parameterId,s.value,i)}}}constructor(){super(),this._parameters=new t}}var de,ge,_e,me,pe;!function(t){t[t.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",t[t.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",t[t.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(de||(de={}));class fe{}!function(t){t.CubismExpressionMotion=ce,t.ExpressionBlendType=de,t.ExpressionParameter=fe}(ge||(ge={})),function(t){t[t.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",t[t.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",t[t.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(_e||(_e={})),function(t){t[t.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",t[t.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",t[t.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",t[t.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped"}(me||(me={}));class ye{constructor(){this.time=0,this.value=0}}class Se{constructor(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0}}class xe{constructor(){this.type=_e.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0}}class Ce{constructor(){this.fireTime=0}}class be{constructor(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new t,this.segments=new t,this.points=new t,this.events=new t}}!function(t){t.CubismMotionCurve=xe,t.CubismMotionCurveTarget=_e,t.CubismMotionData=be,t.CubismMotionEvent=Ce,t.CubismMotionPoint=ye,t.CubismMotionSegment=Se,t.CubismMotionSegmentType=me}(pe||(pe={}));const Be="Meta",we="Curves",Pe="FadeInTime",ve="FadeOutTime",Me="Segments",Te="UserData";class Ee{constructor(t,e){this._json=F.create(t,e)}release(){F.delete(this._json)}getMotionDuration(){return this._json.getRoot().getValueByString(Be).getValueByString("Duration").toFloat()}isMotionLoop(){return this._json.getRoot().getValueByString(Be).getValueByString("Loop").toBoolean()}getEvaluationOptionFlag(t){return Ie.EvaluationOptionFlag_AreBeziersRistricted==t&&this._json.getRoot().getValueByString(Be).getValueByString("AreBeziersRestricted").toBoolean()}getMotionCurveCount(){return this._json.getRoot().getValueByString(Be).getValueByString("CurveCount").toInt()}getMotionFps(){return this._json.getRoot().getValueByString(Be).getValueByString("Fps").toFloat()}getMotionTotalSegmentCount(){return this._json.getRoot().getValueByString(Be).getValueByString("TotalSegmentCount").toInt()}getMotionTotalPointCount(){return this._json.getRoot().getValueByString(Be).getValueByString("TotalPointCount").toInt()}isExistMotionFadeInTime(){return!this._json.getRoot().getValueByString(Be).getValueByString(Pe).isNull()}isExistMotionFadeOutTime(){return!this._json.getRoot().getValueByString(Be).getValueByString(ve).isNull()}getMotionFadeInTime(){return this._json.getRoot().getValueByString(Be).getValueByString(Pe).toFloat()}getMotionFadeOutTime(){return this._json.getRoot().getValueByString(Be).getValueByString(ve).toFloat()}getMotionCurveTarget(t){return this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString("Target").getRawString()}getMotionCurveId(t){return W.getIdManager().getId(this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString("Id").getRawString())}isExistMotionCurveFadeInTime(t){return!this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(Pe).isNull()}isExistMotionCurveFadeOutTime(t){return!this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(ve).isNull()}getMotionCurveFadeInTime(t){return this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(Pe).toFloat()}getMotionCurveFadeOutTime(t){return this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(ve).toFloat()}getMotionCurveSegmentCount(t){return this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(Me).getVector().getSize()}getMotionCurveSegment(t,e){return this._json.getRoot().getValueByString(we).getValueByIndex(t).getValueByString(Me).getValueByIndex(e).toFloat()}getEventCount(){return this._json.getRoot().getValueByString(Be).getValueByString("UserDataCount").toInt()}getTotalEventValueSize(){return this._json.getRoot().getValueByString(Be).getValueByString("TotalUserDataSize").toInt()}getEventTime(t){return this._json.getRoot().getValueByString(Te).getValueByIndex(t).getValueByString("Time").toFloat()}getEventValue(t){return new h(this._json.getRoot().getValueByString(Te).getValueByIndex(t).getValueByString("Value").getRawString())}}var Ie,Re,Fe,Ve;function Ae(t,e,i){const s=new ye;return s.time=t.time+(e.time-t.time)*i,s.value=t.value+(e.value-t.value)*i,s}function Le(t,e){let i=(e-t[0].time)/(t[1].time-t[0].time);return i<0&&(i=0),t[0].value+(t[1].value-t[0].value)*i}function De(t,e){let i=(e-t[0].time)/(t[3].time-t[0].time);i<0&&(i=0);const s=Ae(t[0],t[1],i),r=Ae(t[1],t[2],i),a=Ae(t[2],t[3],i),n=Ae(s,r,i),o=Ae(r,a,i);return Ae(n,o,i).value}function ke(t,e){const i=e,s=t[0].time,r=t[3].time,a=t[1].time,n=t[2].time,o=r-3*n+3*a-s,l=3*n-6*a+3*s,u=3*a-3*s,h=s-i,c=ne.cardanoAlgorithmForBezier(o,l,u,h),d=Ae(t[0],t[1],c),g=Ae(t[1],t[2],c),_=Ae(t[2],t[3],c),m=Ae(d,g,c),p=Ae(g,_,c);return Ae(m,p,c).value}function Oe(t,e){return t[0].value}function Ne(t,e){return t[1].value}function Ue(t,e,i){const s=t.curves.at(e);let r=-1;const a=s.baseSegmentIndex+s.segmentCount;let n=0;for(let e=s.baseSegmentIndex;e<a;++e)if(n=t.segments.at(e).basePointIndex+(t.segments.at(e).segmentType==me.CubismMotionSegmentType_Bezier?3:1),t.points.at(n).time>i){r=e;break}if(-1==r)return t.points.at(n).value;const o=t.segments.at(r);return o.evaluate(t.points.get(o.basePointIndex),i)}!function(t){t[t.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(Ie||(Ie={})),function(t){t.CubismMotionJson=Ee}(Re||(Re={}));class ze extends le{static create(t,e,i){const s=new ze;return s.parse(t,e),s._sourceFrameRate=s._motionData.fps,s._loopDurationSeconds=s._motionData.duration,s._onFinishedMotion=i,s}doUpdateParameters(t,e,i,s){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=W.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=W.getIdManager().getId("LipSync"));let r=e-s.getStartTime();r<0&&(r=0);let a=Number.MAX_VALUE,n=Number.MAX_VALUE;const o=64;let l=0,u=0;this._eyeBlinkParameterIds.getSize()>o&&S("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>o&&S("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());const h=this._fadeInSeconds<=0?1:ne.getEasingSine((e-s.getFadeInStartTime())/this._fadeInSeconds),c=this._fadeOutSeconds<=0||s.getEndTime()<0?1:ne.getEasingSine((s.getEndTime()-e)/this._fadeOutSeconds);let d,g,_,m=r;if(this._isLoop)for(;m>this._motionData.duration;)m-=this._motionData.duration;const p=this._motionData.curves;for(g=0;g<this._motionData.curveCount&&p.at(g).type==_e.CubismMotionCurveTarget_Model;++g)d=Ue(this._motionData,g,m),p.at(g).id==this._modelCurveIdEyeBlink?n=d:p.at(g).id==this._modelCurveIdLipSync&&(a=d);for(;g<this._motionData.curveCount&&p.at(g).type==_e.CubismMotionCurveTarget_Parameter;++g){if(_=t.getParameterIndex(p.at(g).id),-1==_)continue;const r=t.getParameterValueByIndex(_);if(d=Ue(this._motionData,g,m),n!=Number.MAX_VALUE)for(let t=0;t<this._eyeBlinkParameterIds.getSize()&&t<o;++t)if(this._eyeBlinkParameterIds.at(t)==p.at(g).id){d*=n,u|=1<<t;break}if(a!=Number.MAX_VALUE)for(let t=0;t<this._lipSyncParameterIds.getSize()&&t<o;++t)if(this._lipSyncParameterIds.at(t)==p.at(g).id){d+=a,l|=1<<t;break}let f;if(p.at(g).fadeInTime<0&&p.at(g).fadeOutTime<0)f=r+(d-r)*i;else{let t,i;t=p.at(g).fadeInTime<0?h:0==p.at(g).fadeInTime?1:ne.getEasingSine((e-s.getFadeInStartTime())/p.at(g).fadeInTime),i=p.at(g).fadeOutTime<0?c:0==p.at(g).fadeOutTime||s.getEndTime()<0?1:ne.getEasingSine((s.getEndTime()-e)/p.at(g).fadeOutTime),f=r+(d-r)*(this._weight*t*i)}t.setParameterValueByIndex(_,f,1)}if(n!=Number.MAX_VALUE)for(let e=0;e<this._eyeBlinkParameterIds.getSize()&&e<o;++e){const s=t.getParameterValueById(this._eyeBlinkParameterIds.at(e));if(u>>e&1)continue;const r=s+(n-s)*i;t.setParameterValueById(this._eyeBlinkParameterIds.at(e),r)}if(a!=Number.MAX_VALUE)for(let e=0;e<this._lipSyncParameterIds.getSize()&&e<o;++e){const s=t.getParameterValueById(this._lipSyncParameterIds.at(e));if(l>>e&1)continue;const r=s+(a-s)*i;t.setParameterValueById(this._lipSyncParameterIds.at(e),r)}for(;g<this._motionData.curveCount&&p.at(g).type==_e.CubismMotionCurveTarget_PartOpacity;++g)_=t.getParameterIndex(p.at(g).id),-1!=_&&(d=Ue(this._motionData,g,m),t.setParameterValueByIndex(_,d));r>=this._motionData.duration&&(this._isLoop?(s.setStartTime(e),this._isLoopFadeIn&&s.setFadeInStartTime(e)):(this._onFinishedMotion&&this._onFinishedMotion(this),s.setIsFinished(!0))),this._lastWeight=i}setIsLoop(t){this._isLoop=t}isLoop(){return this._isLoop}setIsLoopFadeIn(t){this._isLoopFadeIn=t}isLoopFadeIn(){return this._isLoopFadeIn}getDuration(){return this._isLoop?-1:this._loopDurationSeconds}getLoopDuration(){return this._loopDurationSeconds}setParameterFadeInTime(t,e){const i=this._motionData.curves;for(let s=0;s<this._motionData.curveCount;++s)if(t==i.at(s).id)return void(i.at(s).fadeInTime=e)}setParameterFadeOutTime(t,e){const i=this._motionData.curves;for(let s=0;s<this._motionData.curveCount;++s)if(t==i.at(s).id)return void(i.at(s).fadeOutTime=e)}getParameterFadeInTime(t){const e=this._motionData.curves;for(let i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeInTime;return-1}getParameterFadeOutTime(t){const e=this._motionData.curves;for(let i=0;i<this._motionData.curveCount;++i)if(t==e.at(i).id)return e.at(i).fadeOutTime;return-1}setEffectIds(t,e){this._eyeBlinkParameterIds=t,this._lipSyncParameterIds=e}constructor(){super(),this._sourceFrameRate=30,this._loopDurationSeconds=-1,this._isLoop=!1,this._isLoopFadeIn=!0,this._lastWeight=0,this._motionData=null,this._modelCurveIdEyeBlink=null,this._modelCurveIdLipSync=null,this._eyeBlinkParameterIds=null,this._lipSyncParameterIds=null}release(){this._motionData=void 0,this._motionData=null}parse(t,e){this._motionData=new be;let i=new Ee(t,e);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();const s=i.getEvaluationOptionFlag(Ie.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,xe,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),Se,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),ye,!0),this._motionData.events.updateSize(this._motionData.eventCount,Ce,!0);let r=0,a=0;for(let t=0;t<this._motionData.curveCount;++t){"Model"==i.getMotionCurveTarget(t)?this._motionData.curves.at(t).type=_e.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(t)?this._motionData.curves.at(t).type=_e.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(t)?this._motionData.curves.at(t).type=_e.CubismMotionCurveTarget_PartOpacity:C('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(t).id=i.getMotionCurveId(t),this._motionData.curves.at(t).baseSegmentIndex=a,this._motionData.curves.at(t).fadeInTime=i.isExistMotionCurveFadeInTime(t)?i.getMotionCurveFadeInTime(t):-1,this._motionData.curves.at(t).fadeOutTime=i.isExistMotionCurveFadeOutTime(t)?i.getMotionCurveFadeOutTime(t):-1;for(let e=0;e<i.getMotionCurveSegmentCount(t);){switch(0==e?(this._motionData.segments.at(a).basePointIndex=r,this._motionData.points.at(r).time=i.getMotionCurveSegment(t,e),this._motionData.points.at(r).value=i.getMotionCurveSegment(t,e+1),r+=1,e+=2):this._motionData.segments.at(a).basePointIndex=r-1,i.getMotionCurveSegment(t,e)){case me.CubismMotionSegmentType_Linear:this._motionData.segments.at(a).segmentType=me.CubismMotionSegmentType_Linear,this._motionData.segments.at(a).evaluate=Le,this._motionData.points.at(r).time=i.getMotionCurveSegment(t,e+1),this._motionData.points.at(r).value=i.getMotionCurveSegment(t,e+2),r+=1,e+=3;break;case me.CubismMotionSegmentType_Bezier:this._motionData.segments.at(a).segmentType=me.CubismMotionSegmentType_Bezier,this._motionData.segments.at(a).evaluate=s?De:ke,this._motionData.points.at(r).time=i.getMotionCurveSegment(t,e+1),this._motionData.points.at(r).value=i.getMotionCurveSegment(t,e+2),this._motionData.points.at(r+1).time=i.getMotionCurveSegment(t,e+3),this._motionData.points.at(r+1).value=i.getMotionCurveSegment(t,e+4),this._motionData.points.at(r+2).time=i.getMotionCurveSegment(t,e+5),this._motionData.points.at(r+2).value=i.getMotionCurveSegment(t,e+6),r+=3,e+=7;break;case me.CubismMotionSegmentType_Stepped:this._motionData.segments.at(a).segmentType=me.CubismMotionSegmentType_Stepped,this._motionData.segments.at(a).evaluate=Oe,this._motionData.points.at(r).time=i.getMotionCurveSegment(t,e+1),this._motionData.points.at(r).value=i.getMotionCurveSegment(t,e+2),r+=1,e+=3;break;case me.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(a).segmentType=me.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(a).evaluate=Ne,this._motionData.points.at(r).time=i.getMotionCurveSegment(t,e+1),this._motionData.points.at(r).value=i.getMotionCurveSegment(t,e+2),r+=1,e+=3;break;default:f(0)}++this._motionData.curves.at(t).segmentCount,++a}}for(let t=0;t<i.getEventCount();++t)this._motionData.events.at(t).fireTime=i.getEventTime(t),this._motionData.events.at(t).value=i.getEventValue(t);i.release(),i=void 0,i=null}getFiredEvent(t,e){this._firedEventValues.updateSize(0);for(let i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>t&&this._motionData.events.at(i).fireTime<=e&&this._firedEventValues.pushBack(new h(this._motionData.events.at(i).value.s));return this._firedEventValues}}!function(t){t.CubismMotion=ze}(Fe||(Fe={}));class je{constructor(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}release(){this._autoDelete&&this._motion&&le.delete(this._motion)}setFadeOut(t){this._fadeOutSeconds=t,this._isTriggeredFadeOut=!0}startFadeOut(t,e){const i=e+t;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)}isFinished(){return this._finished}isStarted(){return this._started}getStartTime(){return this._startTimeSeconds}getFadeInStartTime(){return this._fadeInStartTimeSeconds}getEndTime(){return this._endTimeSeconds}setStartTime(t){this._startTimeSeconds=t}setFadeInStartTime(t){this._fadeInStartTimeSeconds=t}setEndTime(t){this._endTimeSeconds=t}setIsFinished(t){this._finished=t}setIsStarted(t){this._started=t}isAvailable(){return this._available}setIsAvailable(t){this._available=t}setState(t,e){this._stateTimeSeconds=t,this._stateWeight=e}getStateTime(){return this._stateTimeSeconds}getStateWeight(){return this._stateWeight}getLastCheckEventSeconds(){return this._lastEventCheckSeconds}setLastCheckEventSeconds(t){this._lastEventCheckSeconds=t}isTriggeredFadeOut(){return this._isTriggeredFadeOut}getFadeOutSeconds(){return this._fadeOutSeconds}}!function(t){t.CubismMotionQueueEntry=je}(Ve||(Ve={}));class Xe{constructor(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new t}release(){for(let t=0;t<this._motions.getSize();++t)this._motions.at(t)&&(this._motions.at(t).release(),this._motions.set(t,null));this._motions=null}startMotion(t,e,i){if(null==t)return qe;let s=null;for(let t=0;t<this._motions.getSize();++t)s=this._motions.at(t),null!=s&&s.setFadeOut(s._motion.getFadeOutTime());return s=new je,s._autoDelete=e,s._motion=t,this._motions.pushBack(s),s._motionQueueEntryHandle}isFinished(){for(let t=this._motions.begin();t.notEqual(this._motions.end());){let e=t.ptr();if(null!=e)if(null!=e._motion){if(!e.isFinished())return!1;t.preIncrement()}else e.release(),e=null,t=this._motions.erase(t);else t=this._motions.erase(t)}return!0}isFinishedByHandle(t){for(let e=this._motions.begin();e.notEqual(this._motions.end());e.increment()){const i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t&&!i.isFinished())return!1}return!0}stopAllMotions(){for(let t=this._motions.begin();t.notEqual(this._motions.end());){let e=t.ptr();null!=e?(e.release(),e=null,t=this._motions.erase(t)):t=this._motions.erase(t)}}getCubismMotionQueueEntry(t){for(let e=this._motions.begin();e.notEqual(this._motions.end());e.preIncrement()){const i=e.ptr();if(null!=i&&i._motionQueueEntryHandle==t)return i}return null}setEventCallback(t,e=null){this._eventCallBack=t,this._eventCustomData=e}doUpdateMotion(t,e){let i=!1;for(let s=this._motions.begin();s.notEqual(this._motions.end());){let r=s.ptr();if(null==r){s=this._motions.erase(s);continue}const a=r._motion;if(null==a){r.release(),r=null,s=this._motions.erase(s);continue}a.updateParameters(t,r,e),i=!0;const n=a.getFiredEvent(r.getLastCheckEventSeconds()-r.getStartTime(),e-r.getStartTime());for(let t=0;t<n.getSize();++t)this._eventCallBack(this,n.at(t),this._eventCustomData);r.setLastCheckEventSeconds(e),r.isFinished()?(r.release(),r=null,s=this._motions.erase(s)):(r.isTriggeredFadeOut()&&r.startFadeOut(r.getFadeOutSeconds(),e),s.preIncrement())}return i}}const qe=-1;var Ge,Ye,He,We,Je;!function(t){t.CubismMotionQueueManager=Xe,t.InvalidMotionQueueEntryHandleValue=qe}(Ge||(Ge={}));class $e extends Xe{constructor(){super(),this._currentPriority=0,this._reservePriority=0}getCurrentPriority(){return this._currentPriority}getReservePriority(){return this._reservePriority}setReservePriority(t){this._reservePriority=t}startMotionPriority(t,e,i){return i==this._reservePriority&&(this._reservePriority=0),this._currentPriority=i,super.startMotion(t,e,this._userTimeSeconds)}updateMotion(t,e){this._userTimeSeconds+=e;const i=super.doUpdateMotion(t,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),i}reserveMotion(t){return!(t<=this._reservePriority||t<=this._currentPriority||(this._reservePriority=t,0))}}!function(t){t.CubismMotionManager=$e}(Ye||(Ye={})),function(t){t[t.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter"}(He||(He={})),function(t){t[t.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",t[t.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",t[t.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle"}(We||(We={}));class Ke{constructor(){this.gravity=new ae(0,0),this.wind=new ae(0,0)}}class Ze{}class Qe{}class ti{constructor(){this.initialPosition=new ae(0,0),this.position=new ae(0,0),this.lastPosition=new ae(0,0),this.lastGravity=new ae(0,0),this.force=new ae(0,0),this.velocity=new ae(0,0)}}class ei{constructor(){this.normalizationPosition=new Qe,this.normalizationAngle=new Qe}}class ii{constructor(){this.source=new Ze}}class si{constructor(){this.destination=new Ze,this.translationScale=new ae(0,0)}}class ri{constructor(){this.settings=new t,this.inputs=new t,this.outputs=new t,this.particles=new t,this.gravity=new ae(0,0),this.wind=new ae(0,0),this.fps=0}}!function(t){t.CubismPhysicsInput=ii,t.CubismPhysicsNormalization=Qe,t.CubismPhysicsOutput=si,t.CubismPhysicsParameter=Ze,t.CubismPhysicsParticle=ti,t.CubismPhysicsRig=ri,t.CubismPhysicsSource=We,t.CubismPhysicsSubRig=ei,t.CubismPhysicsTargetType=He,t.PhysicsJsonEffectiveForces=Ke}(Je||(Je={}));const ai="Position",ni="Angle",oi="Type",li="Meta",ui="EffectiveForces",hi="Gravity",ci="Wind",di="PhysicsSettings",gi="Normalization",_i="Minimum",mi="Maximum",pi="Default",fi="Reflect",yi="Weight",Si="Input",xi="Output",Ci="Vertices";class bi{constructor(t,e){this._json=F.create(t,e)}release(){F.delete(this._json)}getGravity(){const t=new ae(0,0);return t.x=this._json.getRoot().getValueByString(li).getValueByString(ui).getValueByString(hi).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(li).getValueByString(ui).getValueByString(hi).getValueByString("Y").toFloat(),t}getWind(){const t=new ae(0,0);return t.x=this._json.getRoot().getValueByString(li).getValueByString(ui).getValueByString(ci).getValueByString("X").toFloat(),t.y=this._json.getRoot().getValueByString(li).getValueByString(ui).getValueByString(ci).getValueByString("Y").toFloat(),t}getFps(){return this._json.getRoot().getValueByString(li).getValueByString("Fps").toFloat(0)}getSubRigCount(){return this._json.getRoot().getValueByString(li).getValueByString("PhysicsSettingCount").toInt()}getTotalInputCount(){return this._json.getRoot().getValueByString(li).getValueByString("TotalInputCount").toInt()}getTotalOutputCount(){return this._json.getRoot().getValueByString(li).getValueByString("TotalOutputCount").toInt()}getVertexCount(){return this._json.getRoot().getValueByString(li).getValueByString("VertexCount").toInt()}getNormalizationPositionMinimumValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ai).getValueByString(_i).toFloat()}getNormalizationPositionMaximumValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ai).getValueByString(mi).toFloat()}getNormalizationPositionDefaultValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ai).getValueByString(pi).toFloat()}getNormalizationAngleMinimumValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ni).getValueByString(_i).toFloat()}getNormalizationAngleMaximumValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ni).getValueByString(mi).toFloat()}getNormalizationAngleDefaultValue(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(gi).getValueByString(ni).getValueByString(pi).toFloat()}getInputCount(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Si).getVector().getSize()}getInputWeight(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Si).getValueByIndex(e).getValueByString(yi).toFloat()}getInputReflect(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Si).getValueByIndex(e).getValueByString(fi).toBoolean()}getInputType(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Si).getValueByIndex(e).getValueByString(oi).getRawString()}getInputSourceId(t,e){return W.getIdManager().getId(this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Si).getValueByIndex(e).getValueByString("Source").getValueByString("Id").getRawString())}getOutputCount(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getVector().getSize()}getOutputVertexIndex(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString("VertexIndex").toInt()}getOutputAngleScale(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString("Scale").toFloat()}getOutputWeight(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString(yi).toFloat()}getOutputDestinationId(t,e){return W.getIdManager().getId(this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString("Destination").getValueByString("Id").getRawString())}getOutputType(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString(oi).getRawString()}getOutputReflect(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(xi).getValueByIndex(e).getValueByString(fi).toBoolean()}getParticleCount(t){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getVector().getSize()}getParticleMobility(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString("Mobility").toFloat()}getParticleDelay(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString("Delay").toFloat()}getParticleAcceleration(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString("Acceleration").toFloat()}getParticleRadius(t,e){return this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString("Radius").toFloat()}getParticlePosition(t,e){const i=new ae(0,0);return i.x=this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString(ai).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(di).getValueByIndex(t).getValueByString(Ci).getValueByIndex(e).getValueByString(ai).getValueByString("Y").toFloat(),i}}var Bi;!function(t){t.CubismPhysicsJson=bi}(Bi||(Bi={}));const wi="Angle";class Pi{static create(t,e){const i=new Pi;return i.parse(t,e),i._physicsRig.gravity.y=0,i}static delete(t){null!=t&&(t.release(),t=null)}parse(t,e){this._physicsRig=new ri;let i=new bi(t,e);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.fps=i.getFps(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,ei,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),ii,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),si,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),ti,!0),this._currentRigOutputs.clear(),this._previousRigOutputs.clear();let s=0,r=0,a=0;for(let t=0;t<this._physicsRig.settings.getSize();++t){this._physicsRig.settings.at(t).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(t),this._physicsRig.settings.at(t).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(t),this._physicsRig.settings.at(t).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(t),this._physicsRig.settings.at(t).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(t),this._physicsRig.settings.at(t).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(t),this._physicsRig.settings.at(t).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(t),this._physicsRig.settings.at(t).inputCount=i.getInputCount(t),this._physicsRig.settings.at(t).baseInputIndex=s;for(let e=0;e<this._physicsRig.settings.at(t).inputCount;++e)this._physicsRig.inputs.at(s+e).sourceParameterIndex=-1,this._physicsRig.inputs.at(s+e).weight=i.getInputWeight(t,e),this._physicsRig.inputs.at(s+e).reflect=i.getInputReflect(t,e),"X"==i.getInputType(t,e)?(this._physicsRig.inputs.at(s+e).type=We.CubismPhysicsSource_X,this._physicsRig.inputs.at(s+e).getNormalizedParameterValue=Ti):"Y"==i.getInputType(t,e)?(this._physicsRig.inputs.at(s+e).type=We.CubismPhysicsSource_Y,this._physicsRig.inputs.at(s+e).getNormalizedParameterValue=Ei):i.getInputType(t,e)==wi&&(this._physicsRig.inputs.at(s+e).type=We.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(s+e).getNormalizedParameterValue=Ii),this._physicsRig.inputs.at(s+e).source.targetType=He.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(s+e).source.id=i.getInputSourceId(t,e);s+=this._physicsRig.settings.at(t).inputCount,this._physicsRig.settings.at(t).outputCount=i.getOutputCount(t),this._physicsRig.settings.at(t).baseOutputIndex=r;const e=new Mi;e.outputs.resize(this._physicsRig.settings.at(t).outputCount);const n=new Mi;n.outputs.resize(this._physicsRig.settings.at(t).outputCount);for(let s=0;s<this._physicsRig.settings.at(t).outputCount;++s)e.outputs[s]=0,n.outputs[s]=0,this._physicsRig.outputs.at(r+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(r+s).vertexIndex=i.getOutputVertexIndex(t,s),this._physicsRig.outputs.at(r+s).angleScale=i.getOutputAngleScale(t,s),this._physicsRig.outputs.at(r+s).weight=i.getOutputWeight(t,s),this._physicsRig.outputs.at(r+s).destination.targetType=He.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(r+s).destination.id=i.getOutputDestinationId(t,s),"X"==i.getOutputType(t,s)?(this._physicsRig.outputs.at(r+s).type=We.CubismPhysicsSource_X,this._physicsRig.outputs.at(r+s).getValue=Ri,this._physicsRig.outputs.at(r+s).getScale=Ai):"Y"==i.getOutputType(t,s)?(this._physicsRig.outputs.at(r+s).type=We.CubismPhysicsSource_Y,this._physicsRig.outputs.at(r+s).getValue=Fi,this._physicsRig.outputs.at(r+s).getScale=Li):i.getOutputType(t,s)==wi&&(this._physicsRig.outputs.at(r+s).type=We.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(r+s).getValue=Vi,this._physicsRig.outputs.at(r+s).getScale=Di),this._physicsRig.outputs.at(r+s).reflect=i.getOutputReflect(t,s);this._currentRigOutputs.pushBack(e),this._previousRigOutputs.pushBack(n),r+=this._physicsRig.settings.at(t).outputCount,this._physicsRig.settings.at(t).particleCount=i.getParticleCount(t),this._physicsRig.settings.at(t).baseParticleIndex=a;for(let e=0;e<this._physicsRig.settings.at(t).particleCount;++e)this._physicsRig.particles.at(a+e).mobility=i.getParticleMobility(t,e),this._physicsRig.particles.at(a+e).delay=i.getParticleDelay(t,e),this._physicsRig.particles.at(a+e).acceleration=i.getParticleAcceleration(t,e),this._physicsRig.particles.at(a+e).radius=i.getParticleRadius(t,e),this._physicsRig.particles.at(a+e).position=i.getParticlePosition(t,e);a+=this._physicsRig.settings.at(t).particleCount}this.initialize(),i.release(),i=void 0,i=null}stabilization(t){var e,i,s,r;let a,n,o,l;const u=new ae;let h,c,d,g,_,m,p,f;_=t.getModel().parameters.values,m=t.getModel().parameters.maximumValues,p=t.getModel().parameters.minimumValues,f=t.getModel().parameters.defaultValues,(null!==(i=null===(e=this._parameterCaches)||void 0===e?void 0:e.length)&&void 0!==i?i:0)<t.getParameterCount()&&(this._parameterCaches=new Float32Array(t.getParameterCount())),(null!==(r=null===(s=this._parameterInputCaches)||void 0===s?void 0:s.length)&&void 0!==r?r:0)<t.getParameterCount()&&(this._parameterInputCaches=new Float32Array(t.getParameterCount()));for(let e=0;e<t.getParameterCount();++e)this._parameterCaches[e]=_[e],this._parameterInputCaches[e]=_[e];for(let e=0;e<this._physicsRig.subRigCount;++e){a={angle:0},u.x=0,u.y=0,h=this._physicsRig.settings.at(e),c=this._physicsRig.inputs.get(h.baseInputIndex),d=this._physicsRig.outputs.get(h.baseOutputIndex),g=this._physicsRig.particles.get(h.baseParticleIndex);for(let e=0;e<h.inputCount;++e)n=c[e].weight/100,-1==c[e].sourceParameterIndex&&(c[e].sourceParameterIndex=t.getParameterIndex(c[e].source.id)),c[e].getNormalizedParameterValue(u,a,_[c[e].sourceParameterIndex],p[c[e].sourceParameterIndex],m[c[e].sourceParameterIndex],f[c[e].sourceParameterIndex],h.normalizationPosition,h.normalizationAngle,c[e].reflect,n),this._parameterCaches[c[e].sourceParameterIndex]=_[c[e].sourceParameterIndex];o=ne.degreesToRadian(-a.angle),u.x=u.x*ne.cos(o)-u.y*ne.sin(o),u.y=u.x*ne.sin(o)+u.y*ne.cos(o),Oi(g,h.particleCount,u,a.angle,this._options.wind,.001*h.normalizationPosition.maximum);for(let i=0;i<h.outputCount;++i){const s=d[i].vertexIndex;if(-1==d[i].destinationParameterIndex&&(d[i].destinationParameterIndex=t.getParameterIndex(d[i].destination.id)),s<1||s>=h.particleCount)continue;let r=new ae;r=g[s].position.substract(g[s-1].position),l=d[i].getValue(r,g,s,d[i].reflect,this._options.gravity),this._currentRigOutputs.at(e).outputs[i]=l,this._previousRigOutputs.at(e).outputs[i]=l;const a=d[i].destinationParameterIndex,n=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(_.subarray(a))):_.slice(a);Ni(n,p[a],m[a],l,d[i]);for(let t=a,e=0;t<this._parameterCaches.length;t++,e++)_[t]=this._parameterCaches[t]=n[e]}}}evaluate(t,e){var i,s,r,a;let n,o,l,u;const h=new ae;let c,d,g,_,m,p,f,y,S;if(0>=e)return;if(this._currentRemainTime+=e,this._currentRemainTime>5&&(this._currentRemainTime=0),m=t.getModel().parameters.values,p=t.getModel().parameters.maximumValues,f=t.getModel().parameters.minimumValues,y=t.getModel().parameters.defaultValues,(null!==(s=null===(i=this._parameterCaches)||void 0===i?void 0:i.length)&&void 0!==s?s:0)<t.getParameterCount()&&(this._parameterCaches=new Float32Array(t.getParameterCount())),(null!==(a=null===(r=this._parameterInputCaches)||void 0===r?void 0:r.length)&&void 0!==a?a:0)<t.getParameterCount()){this._parameterInputCaches=new Float32Array(t.getParameterCount());for(let e=0;e<t.getParameterCount();++e)this._parameterInputCaches[e]=m[e]}for(S=this._physicsRig.fps>0?1/this._physicsRig.fps:e;this._currentRemainTime>=S;){for(let t=0;t<this._physicsRig.subRigCount;++t){c=this._physicsRig.settings.at(t),g=this._physicsRig.outputs.get(c.baseOutputIndex);for(let e=0;e<c.outputCount;++e)this._previousRigOutputs.at(t).outputs[e]=this._currentRigOutputs.at(t).outputs[e]}const e=S/this._currentRemainTime;for(let i=0;i<t.getParameterCount();++i)this._parameterCaches[i]=this._parameterInputCaches[i]*(1-e)+m[i]*e,this._parameterInputCaches[i]=this._parameterCaches[i];for(let e=0;e<this._physicsRig.subRigCount;++e){n={angle:0},h.x=0,h.y=0,c=this._physicsRig.settings.at(e),d=this._physicsRig.inputs.get(c.baseInputIndex),g=this._physicsRig.outputs.get(c.baseOutputIndex),_=this._physicsRig.particles.get(c.baseParticleIndex);for(let e=0;e<c.inputCount;++e)o=d[e].weight/100,-1==d[e].sourceParameterIndex&&(d[e].sourceParameterIndex=t.getParameterIndex(d[e].source.id)),d[e].getNormalizedParameterValue(h,n,this._parameterCaches[d[e].sourceParameterIndex],f[d[e].sourceParameterIndex],p[d[e].sourceParameterIndex],y[d[e].sourceParameterIndex],c.normalizationPosition,c.normalizationAngle,d[e].reflect,o);l=ne.degreesToRadian(-n.angle),h.x=h.x*ne.cos(l)-h.y*ne.sin(l),h.y=h.x*ne.sin(l)+h.y*ne.cos(l),ki(_,c.particleCount,h,n.angle,this._options.wind,.001*c.normalizationPosition.maximum,S,5);for(let i=0;i<c.outputCount;++i){const s=g[i].vertexIndex;if(-1==g[i].destinationParameterIndex&&(g[i].destinationParameterIndex=t.getParameterIndex(g[i].destination.id)),s<1||s>=c.particleCount)continue;const r=new ae;r.x=_[s].position.x-_[s-1].position.x,r.y=_[s].position.y-_[s-1].position.y,u=g[i].getValue(r,_,s,g[i].reflect,this._options.gravity),this._currentRigOutputs.at(e).outputs[i]=u;const a=g[i].destinationParameterIndex,n=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(this._parameterCaches.subarray(a))):this._parameterCaches.slice(a);Ni(n,f[a],p[a],u,g[i]);for(let t=a,e=0;t<this._parameterCaches.length;t++,e++)this._parameterCaches[t]=n[e]}}this._currentRemainTime-=S}const x=this._currentRemainTime/S;this.interpolate(t,x)}interpolate(t,e){let i,s,r,a,n;r=t.getModel().parameters.values,a=t.getModel().parameters.maximumValues,n=t.getModel().parameters.minimumValues;for(let t=0;t<this._physicsRig.subRigCount;++t){s=this._physicsRig.settings.at(t),i=this._physicsRig.outputs.get(s.baseOutputIndex);for(let o=0;o<s.outputCount;++o){if(-1==i[o].destinationParameterIndex)continue;const s=i[o].destinationParameterIndex,l=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(r.subarray(s))):r.slice(s);Ni(l,n[s],a[s],this._previousRigOutputs.at(t).outputs[o]*(1-e)+this._currentRigOutputs.at(t).outputs[o]*e,i[o]);for(let t=s,e=0;t<r.length;t++,e++)r[t]=l[e]}}}setOptions(t){this._options=t}getOption(){return this._options}constructor(){this._physicsRig=null,this._options=new vi,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0,this._currentRigOutputs=new t,this._previousRigOutputs=new t,this._currentRemainTime=0,this._parameterCaches=null,this._parameterInputCaches=null}release(){this._physicsRig=void 0,this._physicsRig=null}initialize(){let t,e,i;for(let s=0;s<this._physicsRig.subRigCount;++s){e=this._physicsRig.settings.at(s),t=this._physicsRig.particles.get(e.baseParticleIndex),t[0].initialPosition=new ae(0,0),t[0].lastPosition=new ae(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new ae(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new ae(0,0),t[0].force=new ae(0,0);for(let s=1;s<e.particleCount;++s)i=new ae(0,0),i.y=t[s].radius,t[s].initialPosition=new ae(t[s-1].initialPosition.x+i.x,t[s-1].initialPosition.y+i.y),t[s].position=new ae(t[s].initialPosition.x,t[s].initialPosition.y),t[s].lastPosition=new ae(t[s].initialPosition.x,t[s].initialPosition.y),t[s].lastGravity=new ae(0,-1),t[s].lastGravity.y*=-1,t[s].velocity=new ae(0,0),t[s].force=new ae(0,0)}}}class vi{constructor(){this.gravity=new ae(0,0),this.wind=new ae(0,0)}}class Mi{constructor(){this.outputs=new t(0)}}function Ti(t,e,i,s,r,a,n,o,l,u){t.x+=Ui(i,s,r,0,n.minimum,n.maximum,n.defalut,l)*u}function Ei(t,e,i,s,r,a,n,o,l,u){t.y+=Ui(i,s,r,0,n.minimum,n.maximum,n.defalut,l)*u}function Ii(t,e,i,s,r,a,n,o,l,u){e.angle+=Ui(i,s,r,0,o.minimum,o.maximum,o.defalut,l)*u}function Ri(t,e,i,s,r){let a=t.x;return s&&(a*=-1),a}function Fi(t,e,i,s,r){let a=t.y;return s&&(a*=-1),a}function Vi(t,e,i,s,r){let a;return r=i>=2?e[i-1].position.substract(e[i-2].position):r.multiplyByScaler(-1),a=ne.directionToRadian(r,t),s&&(a*=-1),a}function Ai(t,e){return JSON.parse(JSON.stringify(t.x))}function Li(t,e){return JSON.parse(JSON.stringify(t.y))}function Di(t,e){return JSON.parse(JSON.stringify(e))}function ki(t,e,i,s,r,a,n,o){let l,u,h,c,d=new ae(0,0),g=new ae(0,0),_=new ae(0,0),m=new ae(0,0);t[0].position=new ae(i.x,i.y),l=ne.degreesToRadian(s),c=ne.radianToDirection(l),c.normalize();for(let i=1;i<e;++i)t[i].force=c.multiplyByScaler(t[i].acceleration).add(r),t[i].lastPosition=new ae(t[i].position.x,t[i].position.y),u=t[i].delay*n*30,d=t[i].position.substract(t[i-1].position),h=ne.directionToRadian(t[i].lastGravity,c)/o,d.x=ne.cos(h)*d.x-d.y*ne.sin(h),d.y=ne.sin(h)*d.x+d.y*ne.cos(h),t[i].position=t[i-1].position.add(d),g=t[i].velocity.multiplyByScaler(u),_=t[i].force.multiplyByScaler(u).multiplyByScaler(u),t[i].position=t[i].position.add(g).add(_),m=t[i].position.substract(t[i-1].position),m.normalize(),t[i].position=t[i-1].position.add(m.multiplyByScaler(t[i].radius)),ne.abs(t[i].position.x)<a&&(t[i].position.x=0),0!=u&&(t[i].velocity=t[i].position.substract(t[i].lastPosition),t[i].velocity=t[i].velocity.divisionByScalar(u),t[i].velocity=t[i].velocity.multiplyByScaler(t[i].mobility)),t[i].force=new ae(0,0),t[i].lastGravity=new ae(c.x,c.y)}function Oi(t,e,i,s,r,a){let n,o,l=new ae(0,0);t[0].position=new ae(i.x,i.y),n=ne.degreesToRadian(s),o=ne.radianToDirection(n),o.normalize();for(let i=1;i<e;++i)t[i].force=o.multiplyByScaler(t[i].acceleration).add(r),t[i].lastPosition=new ae(t[i].position.x,t[i].position.y),t[i].velocity=new ae(0,0),l=t[i].force,l.normalize(),l=l.multiplyByScaler(t[i].radius),t[i].position=t[i-1].position.add(l),ne.abs(t[i].position.x)<a&&(t[i].position.x=0),t[i].force=new ae(0,0),t[i].lastGravity=new ae(o.x,o.y)}function Ni(t,e,i,s,r){let a,n,o;a=r.getScale(r.translationScale,r.angleScale),n=s*a,n<e?(n<r.valueBelowMinimum&&(r.valueBelowMinimum=n),n=e):n>i&&(n>r.valueExceededMaximum&&(r.valueExceededMaximum=n),n=i),o=r.weight/100,o>=1||(n=t[0]*(1-o)+n*o),t[0]=n}function Ui(t,e,i,s,r,a,n,o){let l=0;const u=ne.max(i,e);u<t&&(t=u);const h=ne.min(i,e);h>t&&(t=h);const c=ne.min(r,a),d=ne.max(r,a),g=n,_=(p=h,f=u,ne.min(p,f)+function(t,e){const i=ne.max(t,e),s=ne.min(t,e);return ne.abs(i-s)}(p,f)/2),m=t-_;var p,f;switch(function(t){let e=0;return t>0?e=1:t<0&&(e=-1),e}(m)){case 1:{const t=d-g,e=u-_;0!=e&&(l=m*(t/e),l+=g);break}case-1:{const t=c-g,e=h-_;0!=e&&(l=m*(t/e),l+=g);break}case 0:l=g}return o?l:-1*l}var zi,ji;!function(t){t.CubismPhysics=Pi,t.Options=vi}(zi||(zi={}));class Xi{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s}getCenterX(){return this.x+.5*this.width}getCenterY(){return this.y+.5*this.height}getRight(){return this.x+this.width}getBottom(){return this.y+this.height}setRect(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height}expand(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e}}let qi,Gi,Yi;!function(t){t.csmRect=Xi}(ji||(ji={}));class Hi{getChannelFlagAsColor(t){return this._channelColors.at(t)}getMaskRenderTexture(){if(this._maskTexture&&null!=this._maskTexture.textures)this._maskTexture.frameNo=this._currentFrameNo;else{null!=this._maskRenderTextures&&this._maskRenderTextures.clear(),this._maskRenderTextures=new t,null!=this._maskColorBuffers&&this._maskColorBuffers.clear(),this._maskColorBuffers=new t;const e=this._clippingMaskBufferSize;for(let t=0;t<this._renderTextureCount;t++)this._maskColorBuffers.pushBack(this.gl.createTexture()),this.gl.bindTexture(this.gl.TEXTURE_2D,this._maskColorBuffers.at(t)),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this._maskRenderTextures.pushBack(this.gl.createFramebuffer()),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTextures.at(t)),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._maskColorBuffers.at(t),0);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,Yi),this._maskTexture=new Wi(this._currentFrameNo,this._maskRenderTextures)}return this._maskTexture.textures}setGL(t){this.gl=t}calcClippedDrawTotalBounds(t,e){let i=Number.MAX_VALUE,s=Number.MAX_VALUE,r=Number.MIN_VALUE,a=Number.MIN_VALUE;const n=e._clippedDrawableIndexList.length;for(let o=0;o<n;o++){const n=e._clippedDrawableIndexList[o],l=t.getDrawableVertexCount(n),u=t.getDrawableVertices(n);let h=Number.MAX_VALUE,c=Number.MAX_VALUE,d=-Number.MAX_VALUE,g=-Number.MAX_VALUE;const _=l*Y.vertexStep;for(let t=Y.vertexOffset;t<_;t+=Y.vertexStep){const e=u[t],i=u[t+1];e<h&&(h=e),e>d&&(d=e),i<c&&(c=i),i>g&&(g=i)}if(h!=Number.MAX_VALUE)if(h<i&&(i=h),c<s&&(s=c),d>r&&(r=d),g>a&&(a=g),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;const t=r-i,n=a-s;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=s,e._allClippedDrawRect.width=t,e._allClippedDrawRect.height=n}}}constructor(){this._currentMaskRenderTexture=null,this._maskColorBuffers=null,this._currentFrameNo=0,this._renderTextureCount=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new t,this._clippingContextListForDraw=new t,this._channelColors=new t,this._tmpBoundsOnModel=new Xi,this._tmpMatrix=new g,this._tmpMatrixForMask=new g,this._tmpMatrixForDraw=new g,this._maskTexture=null;let e=new m;e.R=1,e.G=0,e.B=0,e.A=0,this._channelColors.pushBack(e),e=new m,e.R=0,e.G=1,e.B=0,e.A=0,this._channelColors.pushBack(e),e=new m,e.R=0,e.G=0,e.B=1,e.A=0,this._channelColors.pushBack(e),e=new m,e.R=0,e.G=0,e.B=0,e.A=1,this._channelColors.pushBack(e)}release(){for(let t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);this._clippingContextListForMask=null;for(let t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);if(this._clippingContextListForDraw=null,this._maskTexture){for(let t=0;t<this._maskTexture.textures.getSize();t++)this.gl.deleteFramebuffer(this._maskTexture.textures.at(t));this._maskTexture.textures.clear(),this._maskTexture.textures=null,this._maskTexture=null}for(let t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);if(this._channelColors=null,null!=this._maskColorBuffers){for(let t=0;t<this._maskColorBuffers.getSize();t++)this.gl.deleteTexture(this._maskColorBuffers.at(t));this._maskColorBuffers.clear()}this._maskColorBuffers=null,null!=this._maskRenderTextures&&this._maskRenderTextures.clear(),this._maskRenderTextures=null,null!=this._clearedFrameBufferflags&&this._clearedFrameBufferflags.clear(),this._clearedFrameBufferflags=null}initialize(e,i,s,r,a){a%1!=0&&(C("The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer."),a=~~a),a<1&&C("The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1."),this._renderTextureCount=a<1?1:a,this._clearedFrameBufferflags=new t(this._renderTextureCount);for(let t=0;t<i;t++){if(r[t]<=0){this._clippingContextListForDraw.pushBack(null);continue}let e=this.findSameClip(s[t],r[t]);null==e&&(e=new Ji(this,s[t],r[t]),this._clippingContextListForMask.pushBack(e)),e.addClippedDrawable(t),this._clippingContextListForDraw.pushBack(e)}}setupClippingContext(e,i){this._currentFrameNo++;let s=0;for(let t=0;t<this._clippingContextListForMask.getSize();t++){const i=this._clippingContextListForMask.at(t);this.calcClippedDrawTotalBounds(e,i),i._isUsing&&s++}if(s>0){this.setupLayoutBounds(i.isUsingHighPrecisionMask()?0:s),i.isUsingHighPrecisionMask()||(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._currentMaskRenderTexture=this.getMaskRenderTexture().at(0),i.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),this._clearedFrameBufferflags.getSize()!=this._renderTextureCount&&(this._clearedFrameBufferflags.clear(),this._clearedFrameBufferflags=new t(this._renderTextureCount));for(let t=0;t<this._clearedFrameBufferflags.getSize();t++)this._clearedFrameBufferflags[t]=!1;for(let t=0;t<this._clippingContextListForMask.getSize();t++){const s=this._clippingContextListForMask.at(t),r=s._allClippedDrawRect,a=s._layoutBounds,n=.05;let o=0,u=0;const h=this.getMaskRenderTexture().at(s._bufferIndex);if(this._currentMaskRenderTexture==h||i.isUsingHighPrecisionMask()||(this._currentMaskRenderTexture=h,i.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),i.isUsingHighPrecisionMask()){const t=e.getPixelsPerUnit(),i=s.getClippingManager()._clippingMaskBufferSize,l=a.width*i,h=a.height*i;this._tmpBoundsOnModel.setRect(r),this._tmpBoundsOnModel.width*t>l?(this._tmpBoundsOnModel.expand(r.width*n,0),o=a.width/this._tmpBoundsOnModel.width):o=t/l,this._tmpBoundsOnModel.height*t>h?(this._tmpBoundsOnModel.expand(0,r.height*n),u=a.height/this._tmpBoundsOnModel.height):u=t/h}else this._tmpBoundsOnModel.setRect(r),this._tmpBoundsOnModel.expand(r.width*n,r.height*n),o=a.width/this._tmpBoundsOnModel.width,u=a.height/this._tmpBoundsOnModel.height;if(this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(a.x,a.y),this._tmpMatrix.scaleRelative(o,u),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(a.x,a.y),this._tmpMatrix.scaleRelative(o,u),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),s._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),s._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray()),!i.isUsingHighPrecisionMask()){const t=s._clippingIdCount;for(let r=0;r<t;r++){const t=s._clippingIdList[r];e.getDrawableDynamicFlagVertexPositionsDidChange(t)&&(i.setIsCulling(0!=e.getDrawableCulling(t)),this._clearedFrameBufferflags[s._bufferIndex]||(this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this._clearedFrameBufferflags[s._bufferIndex]=!0),i.setClippingContextBufferForMask(s),i.drawMesh(e.getDrawableTextureIndex(t),e.getDrawableVertexIndexCount(t),e.getDrawableVertexCount(t),e.getDrawableVertexIndices(t),e.getDrawableVertices(t),e.getDrawableVertexUvs(t),e.getMultiplyColor(t),e.getScreenColor(t),e.getDrawableOpacity(t),l.CubismBlendMode_Normal,!1))}}}i.isUsingHighPrecisionMask()||(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,Yi),i.setClippingContextBufferForMask(null),this.gl.viewport(Gi[0],Gi[1],Gi[2],Gi[3]))}}findSameClip(t,e){for(let i=0;i<this._clippingContextListForMask.getSize();i++){const s=this._clippingContextListForMask.at(i),r=s._clippingIdCount;if(r!=e)continue;let a=0;for(let e=0;e<r;e++){const i=s._clippingIdList[e];for(let e=0;e<r;e++)if(t[e]==i){a++;break}}if(a==r)return s}return null}setupLayoutBounds(t){const e=this._renderTextureCount<=1?36:32*this._renderTextureCount;if(t<=0||t>e){t>e&&b("not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}",t-e,this._renderTextureCount,t);for(let t=0;t<this._clippingContextListForMask.getSize();t++){const e=this._clippingContextListForMask.at(t);e._layoutChannelNo=0,e._layoutBounds.x=0,e._layoutBounds.y=0,e._layoutBounds.width=1,e._layoutBounds.height=1,e._bufferIndex=0}return}const i=this._renderTextureCount<=1?9:8;let s=t/this._renderTextureCount,r=t%this._renderTextureCount;s=~~s,r=~~r;let a=s/4,n=s%4;a=~~a,n=~~n;let o=0;for(let s=0;s<this._renderTextureCount;s++)for(let l=0;l<4;l++){let u=a+(l<n?1:0);const h=n+1>=4?0:n+1;if(u<i&&l==h&&(u+=s<r?1:0),0==u);else if(1==u){const t=this._clippingContextListForMask.at(o++);t._layoutChannelNo=l,t._layoutBounds.x=0,t._layoutBounds.y=0,t._layoutBounds.width=1,t._layoutBounds.height=1,t._bufferIndex=s}else if(2==u)for(let t=0;t<u;t++){let e=t%2;e=~~e;const i=this._clippingContextListForMask.at(o++);i._layoutChannelNo=l,i._layoutBounds.x=.5*e,i._layoutBounds.y=0,i._layoutBounds.width=.5,i._layoutBounds.height=1,i._bufferIndex=s}else if(u<=4)for(let t=0;t<u;t++){let e=t%2,i=t/2;e=~~e,i=~~i;const r=this._clippingContextListForMask.at(o++);r._layoutChannelNo=l,r._layoutBounds.x=.5*e,r._layoutBounds.y=.5*i,r._layoutBounds.width=.5,r._layoutBounds.height=.5,r._bufferIndex=s}else if(u<=i)for(let t=0;t<u;t++){let e=t%3,i=t/3;e=~~e,i=~~i;const r=this._clippingContextListForMask.at(o++);r._layoutChannelNo=l,r._layoutBounds.x=e/3,r._layoutBounds.y=i/3,r._layoutBounds.width=1/3,r._layoutBounds.height=1/3,r._bufferIndex=s}else{b("not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}",t-e,this._renderTextureCount,t);for(let t=0;t<u;t++){const t=this._clippingContextListForMask.at(o++);t._layoutChannelNo=0,t._layoutBounds.x=0,t._layoutBounds.y=0,t._layoutBounds.width=1,t._layoutBounds.height=1,t._bufferIndex=0}}}}getColorBuffer(){return this._maskColorBuffers}getClippingContextListForDraw(){return this._clippingContextListForDraw}getClippingMaskCount(){return this._clippingContextListForMask.getSize()}setClippingMaskBufferSize(t){this._clippingMaskBufferSize=t}getClippingMaskBufferSize(){return this._clippingMaskBufferSize}getRenderTextureCount(){return this._renderTextureCount}}class Wi{constructor(t,e){this.frameNo=t,this.textures=e}}class Ji{constructor(t,e,i){this._owner=t,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new Xi,this._layoutBounds=new Xi,this._clippedDrawableIndexList=[],this._matrixForMask=new g,this._matrixForDraw=new g,this._bufferIndex=0}release(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)}addClippedDrawable(t){this._clippedDrawableIndexList.push(t)}getClippingManager(){return this._owner}setGl(t){this._owner.setGL(t)}}class $i{setGlEnable(t,e){e?this.gl.enable(t):this.gl.disable(t)}setGlEnableVertexAttribArray(t,e){e?this.gl.enableVertexAttribArray(t):this.gl.disableVertexAttribArray(t)}save(){null!=this.gl?(this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ARRAY_BUFFER_BINDING),this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ELEMENT_ARRAY_BUFFER_BINDING),this._lastProgram=this.gl.getParameter(this.gl.CURRENT_PROGRAM),this._lastActiveTexture=this.gl.getParameter(this.gl.ACTIVE_TEXTURE),this.gl.activeTexture(this.gl.TEXTURE1),this._lastTexture1Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this.gl.activeTexture(this.gl.TEXTURE0),this._lastTexture0Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this._lastVertexAttribArrayEnabled[0]=this.gl.getVertexAttrib(0,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[1]=this.gl.getVertexAttrib(1,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[2]=this.gl.getVertexAttrib(2,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[3]=this.gl.getVertexAttrib(3,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastScissorTest=this.gl.isEnabled(this.gl.SCISSOR_TEST),this._lastStencilTest=this.gl.isEnabled(this.gl.STENCIL_TEST),this._lastDepthTest=this.gl.isEnabled(this.gl.DEPTH_TEST),this._lastCullFace=this.gl.isEnabled(this.gl.CULL_FACE),this._lastBlend=this.gl.isEnabled(this.gl.BLEND),this._lastFrontFace=this.gl.getParameter(this.gl.FRONT_FACE),this._lastColorMask=this.gl.getParameter(this.gl.COLOR_WRITEMASK),this._lastBlending[0]=this.gl.getParameter(this.gl.BLEND_SRC_RGB),this._lastBlending[1]=this.gl.getParameter(this.gl.BLEND_DST_RGB),this._lastBlending[2]=this.gl.getParameter(this.gl.BLEND_SRC_ALPHA),this._lastBlending[3]=this.gl.getParameter(this.gl.BLEND_DST_ALPHA),this._lastFBO=this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING),this._lastViewport=this.gl.getParameter(this.gl.VIEWPORT)):b("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.")}restore(){null!=this.gl?(this.gl.useProgram(this._lastProgram),this.setGlEnableVertexAttribArray(0,this._lastVertexAttribArrayEnabled[0]),this.setGlEnableVertexAttribArray(1,this._lastVertexAttribArrayEnabled[1]),this.setGlEnableVertexAttribArray(2,this._lastVertexAttribArrayEnabled[2]),this.setGlEnableVertexAttribArray(3,this._lastVertexAttribArrayEnabled[3]),this.setGlEnable(this.gl.SCISSOR_TEST,this._lastScissorTest),this.setGlEnable(this.gl.STENCIL_TEST,this._lastStencilTest),this.setGlEnable(this.gl.DEPTH_TEST,this._lastDepthTest),this.setGlEnable(this.gl.CULL_FACE,this._lastCullFace),this.setGlEnable(this.gl.BLEND,this._lastBlend),this.gl.frontFace(this._lastFrontFace),this.gl.colorMask(this._lastColorMask[0],this._lastColorMask[1],this._lastColorMask[2],this._lastColorMask[3]),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this._lastArrayBufferBinding),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this._lastElementArrayBufferBinding),this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture1Binding2D),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture0Binding2D),this.gl.activeTexture(this._lastActiveTexture),this.gl.blendFuncSeparate(this._lastBlending[0],this._lastBlending[1],this._lastBlending[2],this._lastBlending[3])):b("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.")}setGl(t){this.gl=t}constructor(){this._lastVertexAttribArrayEnabled=new Array(4),this._lastColorMask=new Array(4),this._lastBlending=new Array(4),this._lastViewport=new Array(4)}}class Ki{static getInstance(){return null==qi?(qi=new Ki,qi):qi}static deleteInstance(){qi&&(qi.release(),qi=null)}constructor(){this._shaderSets=new t}release(){this.releaseShaderProgram()}setupShaderProgram(t,e,i,s,r,a,n,o,u,h,c,d,g,_,m){let p,f,y,S;if(g||b("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){const i=this._shaderSets.at(Qi.ShaderNames_SetupMask);this.gl.useProgram(i.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(i.samplerTexture0Location,0),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,s,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(i.attributePositionLocation),this.gl.vertexAttribPointer(i.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(i.attributeTexCoordLocation),this.gl.vertexAttribPointer(i.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);const r=t.getClippingContextBufferForMask()._layoutChannelNo,o=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(r);this.gl.uniform4f(i.uniformChannelFlagLocation,o.R,o.G,o.B,o.A),this.gl.uniformMatrix4fv(i.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());const l=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(i.uniformBaseColorLocation,2*l.x-1,2*l.y-1,2*l.getRight()-1,2*l.getBottom()-1),this.gl.uniform4f(i.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(i.uniformScreenColorLocation,d.R,d.G,d.B,d.A),p=this.gl.ZERO,f=this.gl.ONE_MINUS_SRC_COLOR,y=this.gl.ZERO,S=this.gl.ONE_MINUS_SRC_ALPHA}else{const i=null!=t.getClippingContextBufferForDraw(),r=i?m?2:1:0;let o=new Zi;switch(u){case l.CubismBlendMode_Normal:default:o=this._shaderSets.at(Qi.ShaderNames_NormalPremultipliedAlpha+r),p=this.gl.ONE,f=this.gl.ONE_MINUS_SRC_ALPHA,y=this.gl.ONE,S=this.gl.ONE_MINUS_SRC_ALPHA;break;case l.CubismBlendMode_Additive:o=this._shaderSets.at(Qi.ShaderNames_AddPremultipliedAlpha+r),p=this.gl.ONE,f=this.gl.ONE,y=this.gl.ZERO,S=this.gl.ONE;break;case l.CubismBlendMode_Multiplicative:o=this._shaderSets.at(Qi.ShaderNames_MultPremultipliedAlpha+r),p=this.gl.DST_COLOR,f=this.gl.ONE_MINUS_SRC_ALPHA,y=this.gl.ZERO,S=this.gl.ONE}if(this.gl.useProgram(o.shaderProgram),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,s,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(o.attributePositionLocation),this.gl.vertexAttribPointer(o.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(o.attributeTexCoordLocation),this.gl.vertexAttribPointer(o.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),i){this.gl.activeTexture(this.gl.TEXTURE1);const e=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer().at(t.getClippingContextBufferForDraw()._bufferIndex);this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(o.samplerTexture1Location,1),this.gl.uniformMatrix4fv(o.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray());const i=t.getClippingContextBufferForDraw()._layoutChannelNo,s=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(i);this.gl.uniform4f(o.uniformChannelFlagLocation,s.R,s.G,s.B,s.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(o.samplerTexture0Location,0),this.gl.uniformMatrix4fv(o.uniformMatrixLocation,!1,_.getArray()),this.gl.uniform4f(o.uniformBaseColorLocation,h.R,h.G,h.B,h.A),this.gl.uniform4f(o.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(o.uniformScreenColorLocation,d.R,d.G,d.B,d.A)}null==n.index&&(n.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,n.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(p,f,y,S)}releaseShaderProgram(){for(let t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)}generateShaders(){for(let t=0;t<10;t++)this._shaderSets.pushBack(new Zi);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(ts,es),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(is,rs),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(ss,as),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(ss,ns),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(0).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_multiplyColor"),this._shaderSets.at(0).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_screenColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(1).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_multiplyColor"),this._shaderSets.at(1).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_screenColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(2).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_multiplyColor"),this._shaderSets.at(2).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_screenColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(3).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_multiplyColor"),this._shaderSets.at(3).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_screenColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(4).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_multiplyColor"),this._shaderSets.at(4).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_screenColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(5).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_multiplyColor"),this._shaderSets.at(5).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_screenColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(6).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_multiplyColor"),this._shaderSets.at(6).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_screenColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(7).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_multiplyColor"),this._shaderSets.at(7).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_screenColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(8).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_multiplyColor"),this._shaderSets.at(8).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_screenColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor"),this._shaderSets.at(9).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_multiplyColor"),this._shaderSets.at(9).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_screenColor")}loadShaderProgram(t,e){let i=this.gl.createProgram(),s=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!s)return b("Vertex shader compile error!"),0;let r=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return r?(this.gl.attachShader(i,s),this.gl.attachShader(i,r),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(s),this.gl.deleteShader(r),i):(b("Failed to link program: {0}",i),this.gl.deleteShader(s),s=0,this.gl.deleteShader(r),r=0,i&&(this.gl.deleteProgram(i),i=0),0)):(b("Vertex shader compile error!"),0)}compileShaderSource(t,e){const i=e,s=this.gl.createShader(t);if(this.gl.shaderSource(s,i),this.gl.compileShader(s),!s){const t=this.gl.getShaderInfoLog(s);b("Shader compile log: {0} ",t)}return this.gl.getShaderParameter(s,this.gl.COMPILE_STATUS)?s:(this.gl.deleteShader(s),null)}setGl(t){this.gl=t}}class Zi{}var Qi;!function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(Qi||(Qi={}));const ts="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",es="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",is="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",ss="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",rs="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 color = texColor * u_baseColor;   gl_FragColor = vec4(color.rgb, color.a);}",as="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",ns="precision mediump float;varying vec2      v_texCoord;varying vec4      v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4      u_channelFlag;uniform vec4      u_baseColor;uniform vec4      u_multiplyColor;uniform vec4      u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * (1.0 - maskVal);   gl_FragColor = col_formask;}";class os extends _{initialize(t,e=1){t.isUsingMasking()&&(this._clippingManager=new Hi,this._clippingManager.initialize(t,t.getDrawableCount(),t.getDrawableMasks(),t.getDrawableMaskCounts(),e)),this._sortedDrawableIndexList.resize(t.getDrawableCount(),0),super.initialize(t)}bindTexture(t,e){this._textures.setValue(t,e)}getBindedTextures(){return this._textures}setClippingMaskBufferSize(t){if(!this._model.isUsingMasking())return;const e=this._clippingManager.getRenderTextureCount();this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new Hi,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts(),e)}getClippingMaskBufferSize(){return this._model.isUsingMasking()?this._clippingManager.getClippingMaskBufferSize():-1}getRenderTextureCount(){return this._model.isUsingMasking()?this._clippingManager.getRenderTextureCount():-1}constructor(){super(),this._clippingContextBufferForMask=null,this._clippingContextBufferForDraw=null,this._rendererProfile=new $i,this.firstDraw=!0,this._textures=new M,this._sortedDrawableIndexList=new t,this._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},this._textures.prepareCapacity(32,!0)}release(){this._clippingManager&&(this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null),null!=this.gl&&(this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null)}doDrawModel(){if(null==this.gl)return void b("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.");null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();const t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders();for(let i=0;i<t;++i){const t=e[i];this._sortedDrawableIndexList.set(t,i)}for(let e=0;e<t;++e){const t=this._sortedDrawableIndexList.at(e);if(!this.getModel().getDrawableDynamicFlagIsVisible(t))continue;const i=null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(t):null;if(null!=i&&this.isUsingHighPrecisionMask()){i._isUsing&&(this.gl.viewport(0,0,this._clippingManager.getClippingMaskBufferSize(),this._clippingManager.getClippingMaskBufferSize()),this.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,i.getClippingManager().getMaskRenderTexture().at(i._bufferIndex)),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT));{const t=i._clippingIdCount;for(let e=0;e<t;e++){const t=i._clippingIdList[e];this._model.getDrawableDynamicFlagVertexPositionsDidChange(t)&&(this.setIsCulling(0!=this._model.getDrawableCulling(t)),this.setClippingContextBufferForMask(i),this.drawMesh(this.getModel().getDrawableTextureIndex(t),this.getModel().getDrawableVertexIndexCount(t),this.getModel().getDrawableVertexCount(t),this.getModel().getDrawableVertexIndices(t),this.getModel().getDrawableVertices(t),this.getModel().getDrawableVertexUvs(t),this.getModel().getMultiplyColor(t),this.getModel().getScreenColor(t),this.getModel().getDrawableOpacity(t),l.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,Yi),this.setClippingContextBufferForMask(null),this.gl.viewport(Gi[0],Gi[1],Gi[2],Gi[3]),this.preDraw()}this.setClippingContextBufferForDraw(i),this.setIsCulling(this.getModel().getDrawableCulling(t)),this.drawMesh(this.getModel().getDrawableTextureIndex(t),this.getModel().getDrawableVertexIndexCount(t),this.getModel().getDrawableVertexCount(t),this.getModel().getDrawableVertexIndices(t),this.getModel().getDrawableVertices(t),this.getModel().getDrawableVertexUvs(t),this.getModel().getMultiplyColor(t),this.getModel().getScreenColor(t),this.getModel().getDrawableOpacity(t),this.getModel().getDrawableBlendMode(t),this.getModel().getDrawableInvertedMaskBit(t))}}drawMesh(t,e,i,s,r,a,n,o,l,u,h){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);const c=this.getModelColor();let d;null==this.getClippingContextBufferForMask()&&(c.A*=l,this.isPremultipliedAlpha()&&(c.R*=c.A,c.G*=c.A,c.B*=c.A)),d=null!=this._textures.getValue(t)?this._textures.getValue(t):null,Ki.getInstance().setupShaderProgram(this,d,i,r,s,a,this._bufferData,l,u,c,n,o,this.isPremultipliedAlpha(),this.getMvpMatrix(),h),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)}saveProfile(){this._rendererProfile.save()}restoreProfile(){this._rendererProfile.restore()}static doStaticRelease(){Ki.deleteInstance()}setRenderState(t,e){Yi=t,Gi=e}preDraw(){if(this.firstDraw&&(this.firstDraw=!1),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null),this.getAnisotropy()>0&&this._extension)for(let t=0;t<this._textures.getSize();++t)this.gl.bindTexture(this.gl.TEXTURE_2D,this._textures.getValue(t)),this.gl.texParameterf(this.gl.TEXTURE_2D,this._extension.TEXTURE_MAX_ANISOTROPY_EXT,this.getAnisotropy())}setClippingContextBufferForMask(t){this._clippingContextBufferForMask=t}getClippingContextBufferForMask(){return this._clippingContextBufferForMask}setClippingContextBufferForDraw(t){this._clippingContextBufferForDraw=t}getClippingContextBufferForDraw(){return this._clippingContextBufferForDraw}startUp(t){this.gl=t,this._clippingManager&&this._clippingManager.setGL(t),Ki.getInstance().setGl(t),this._rendererProfile.setGl(t),this._extension=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")}}var ls,us,hs;_.staticRelease=()=>{os.doStaticRelease()},function(t){t.CubismClippingContext=Ji,t.CubismClippingManager_WebGL=Hi,t.CubismRenderTextureResource=Wi,t.CubismRenderer_WebGL=os,t.CubismShaderSet=Zi,t.CubismShader_WebGL=Ki,t.ShaderNames=Qi}(ls||(ls={}));class cs{constructor(){this.isOverwritten=!1,this.Color=new m}}class ds{constructor(t=!1,e=!1){this.isOverwritten,this.isCulling}}class gs{update(){this._model.update(),this._model.drawables.resetDynamicFlags()}getPixelsPerUnit(){return null==this._model?0:this._model.canvasinfo.PixelsPerUnit}getCanvasWidth(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit}getCanvasHeight(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit}saveParameters(){const t=this._model.parameters.count,e=this._savedParameters.getSize();for(let i=0;i<t;++i)i<e?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])}getMultiplyColor(t){return this.getOverwriteFlagForModelMultiplyColors()||this.getOverwriteFlagForDrawableMultiplyColors(t)?this._userMultiplyColors.at(t).Color:this.getDrawableMultiplyColor(t)}getScreenColor(t){return this.getOverwriteFlagForModelScreenColors()||this.getOverwriteFlagForDrawableScreenColors(t)?this._userScreenColors.at(t).Color:this.getDrawableScreenColor(t)}setMultiplyColorByTextureColor(t,e){this.setMultiplyColorByRGBA(t,e.R,e.G,e.B,e.A)}setMultiplyColorByRGBA(t,e,i,s,r=1){this._userMultiplyColors.at(t).Color.R=e,this._userMultiplyColors.at(t).Color.G=i,this._userMultiplyColors.at(t).Color.B=s,this._userMultiplyColors.at(t).Color.A=r}setScreenColorByTextureColor(t,e){this.setScreenColorByRGBA(t,e.R,e.G,e.B,e.A)}setScreenColorByRGBA(t,e,i,s,r=1){this._userScreenColors.at(t).Color.R=e,this._userScreenColors.at(t).Color.G=i,this._userScreenColors.at(t).Color.B=s,this._userScreenColors.at(t).Color.A=r}getOverwriteFlagForModelMultiplyColors(){return this._isOverwrittenModelMultiplyColors}getOverwriteFlagForModelScreenColors(){return this._isOverwrittenModelScreenColors}setOverwriteFlagForModelMultiplyColors(t){this._isOverwrittenModelMultiplyColors=t}setOverwriteFlagForModelScreenColors(t){this._isOverwrittenModelScreenColors=t}getOverwriteFlagForDrawableMultiplyColors(t){return this._userMultiplyColors.at(t).isOverwritten}getOverwriteFlagForDrawableScreenColors(t){return this._userMultiplyColors.at(t).isOverwritten}setOverwriteFlagForDrawableMultiplyColors(t,e){this._userMultiplyColors.at(t).isOverwritten=e}setOverwriteFlagForDrawableScreenColors(t,e){this._userScreenColors.at(t).isOverwritten=e}getDrawableCulling(t){if(this.getOverwriteFlagForModelCullings()||this.getOverwriteFlagForDrawableCullings(t))return this._userCullings.at(t).isCulling;const e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])}setDrawableCulling(t,e){this._userCullings.at(t).isCulling=e}getOverwriteFlagForModelCullings(){return this._isOverwrittenCullings}setOverwriteFlagForModelCullings(t){this._isOverwrittenCullings=t}getOverwriteFlagForDrawableCullings(t){return this._userCullings.at(t).isOverwritten}setOverwriteFlagForDrawableCullings(t,e){this._userCullings.at(t).isOverwritten=e}getModel(){return this._model}getPartIndex(t){let e;const i=this._model.parts.count;for(e=0;e<i;++e)if(t==this._partIds.at(e))return e;return this._notExistPartId.isExist(t)?this._notExistPartId.getValue(t):(e=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(t,e),this._notExistPartOpacities.appendKey(e),e)}getPartCount(){return this._model.parts.count}setPartOpacityByIndex(t,e){this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.setValue(t,e):(f(0<=t&&t<this.getPartCount()),this._partOpacities[t]=e)}setPartOpacityById(t,e){const i=this.getPartIndex(t);i<0||this.setPartOpacityByIndex(i,e)}getPartOpacityByIndex(t){return this._notExistPartOpacities.isExist(t)?this._notExistPartOpacities.getValue(t):(f(0<=t&&t<this.getPartCount()),this._partOpacities[t])}getPartOpacityById(t){const e=this.getPartIndex(t);return e<0?0:this.getPartOpacityByIndex(e)}getParameterIndex(t){let e;const i=this._model.parameters.count;for(e=0;e<i;++e)if(t==this._parameterIds.at(e))return e;return this._notExistParameterId.isExist(t)?this._notExistParameterId.getValue(t):(e=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(t,e),this._notExistParameterValues.appendKey(e),e)}getParameterCount(){return this._model.parameters.count}getParameterType(t){return this._model.parameters.types[t]}getParameterMaximumValue(t){return this._model.parameters.maximumValues[t]}getParameterMinimumValue(t){return this._model.parameters.minimumValues[t]}getParameterDefaultValue(t){return this._model.parameters.defaultValues[t]}getParameterValueByIndex(t){return this._notExistParameterValues.isExist(t)?this._notExistParameterValues.getValue(t):(f(0<=t&&t<this.getParameterCount()),this._parameterValues[t])}getParameterValueById(t){const e=this.getParameterIndex(t);return this.getParameterValueByIndex(e)}setParameterValueByIndex(t,e,i=1){this._notExistParameterValues.isExist(t)?this._notExistParameterValues.setValue(t,1==i?e:this._notExistParameterValues.getValue(t)*(1-i)+e*i):(f(0<=t&&t<this.getParameterCount()),this._model.parameters.maximumValues[t]<e&&(e=this._model.parameters.maximumValues[t]),this._model.parameters.minimumValues[t]>e&&(e=this._model.parameters.minimumValues[t]),this._parameterValues[t]=1==i?e:this._parameterValues[t]=this._parameterValues[t]*(1-i)+e*i)}setParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.setParameterValueByIndex(s,e,i)}addParameterValueByIndex(t,e,i=1){this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)+e*i)}addParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.addParameterValueByIndex(s,e,i)}multiplyParameterValueById(t,e,i=1){const s=this.getParameterIndex(t);this.multiplyParameterValueByIndex(s,e,i)}multiplyParameterValueByIndex(t,e,i=1){this.setParameterValueByIndex(t,this.getParameterValueByIndex(t)*(1+(e-1)*i))}getDrawableIndex(t){const e=this._model.drawables.count;for(let i=0;i<e;++i)if(this._drawableIds.at(i)==t)return i;return-1}getDrawableCount(){return this._model.drawables.count}getDrawableId(t){const e=this._model.drawables.ids;return W.getIdManager().getId(e[t])}getDrawableRenderOrders(){return this._model.drawables.renderOrders}getDrawableTextureIndices(t){return this.getDrawableTextureIndex(t)}getDrawableTextureIndex(t){return this._model.drawables.textureIndices[t]}getDrawableDynamicFlagVertexPositionsDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])}getDrawableVertexIndexCount(t){return this._model.drawables.indexCounts[t]}getDrawableVertexCount(t){return this._model.drawables.vertexCounts[t]}getDrawableVertices(t){return this.getDrawableVertexPositions(t)}getDrawableVertexIndices(t){return this._model.drawables.indices[t]}getDrawableVertexPositions(t){return this._model.drawables.vertexPositions[t]}getDrawableVertexUvs(t){return this._model.drawables.vertexUvs[t]}getDrawableOpacity(t){return this._model.drawables.opacities[t]}getDrawableMultiplyColor(t){const e=this._model.drawables.multiplyColors,i=4*t,s=new m;return s.R=e[i],s.G=e[i+1],s.B=e[i+2],s.A=e[i+3],s}getDrawableScreenColor(t){const e=this._model.drawables.screenColors,i=4*t,s=new m;return s.R=e[i],s.G=e[i+1],s.B=e[i+2],s.A=e[i+3],s}getDrawableParentPartIndex(t){return this._model.drawables.parentPartIndices[t]}getDrawableBlendMode(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?l.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?l.CubismBlendMode_Multiplicative:l.CubismBlendMode_Normal}getDrawableInvertedMaskBit(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])}getDrawableMasks(){return this._model.drawables.masks}getDrawableMaskCounts(){return this._model.drawables.maskCounts}isUsingMasking(){for(let t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1}getDrawableDynamicFlagIsVisible(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])}getDrawableDynamicFlagVisibilityDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(e[t])}getDrawableDynamicFlagOpacityDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(e[t])}getDrawableDynamicFlagRenderOrderDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(e[t])}getDrawableDynamicFlagBlendColorDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(e[t])}loadParameters(){let t=this._model.parameters.count;const e=this._savedParameters.getSize();t>e&&(t=e);for(let e=0;e<t;++e)this._parameterValues[e]=this._savedParameters.at(e)}initialize(){f(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;{const t=this._model.parameters.ids,e=this._model.parameters.count;this._parameterIds.prepareCapacity(e);for(let i=0;i<e;++i)this._parameterIds.pushBack(W.getIdManager().getId(t[i]))}{const t=this._model.parts.ids,e=this._model.parts.count;this._partIds.prepareCapacity(e);for(let i=0;i<e;++i)this._partIds.pushBack(W.getIdManager().getId(t[i]))}{const e=this._model.drawables.ids,i=this._model.drawables.count;this._userMultiplyColors=new t,this._userMultiplyColors.updateSize(i,cs,!0),this._userScreenColors=new t,this._userScreenColors.updateSize(i,cs,!0),this._userCullings=new t,this._userCullings.updateSize(i,ds,!0);const s=new ds(!1,!1);this._drawableIds.prepareCapacity(i);for(let t=0;t<i;++t)this._drawableIds.pushBack(W.getIdManager().getId(e[t])),this.setMultiplyColorByRGBA(t,1,1,1,1),this.setScreenColorByRGBA(t,0,0,0,1),this._userCullings.pushBack(s)}}constructor(e){this._model=e,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new t,this._parameterIds=new t,this._drawableIds=new t,this._partIds=new t,this._isOverwrittenModelMultiplyColors=!1,this._isOverwrittenModelScreenColors=!1,this._isOverwrittenCullings=!1,this._userMultiplyColors=null,this._userScreenColors=null,this._notExistPartId=new M,this._notExistParameterId=new M,this._notExistParameterValues=new M,this._notExistPartOpacities=new M}release(){this._model.release(),this._model=null}}!function(t){t.CubismModel=gs}(us||(us={}));class _s{static create(t){let e=null;const i=Live2DCubismCore.Moc.fromArrayBuffer(t);return i&&(e=new _s(i),e._mocVersion=Live2DCubismCore.Version.csmGetMocVersion(i,t)),e}static delete(t){t._moc._release(),t._moc=null,t=null}createModel(){let t=null;const e=Live2DCubismCore.Model.fromMoc(this._moc);return e&&(t=new gs(e),t.initialize(),++this._modelCount),t}deleteModel(t){null!=t&&(t.release(),t=null,--this._modelCount)}constructor(t){this._moc=t,this._modelCount=0,this._mocVersion=0}release(){f(0==this._modelCount),this._moc._release(),this._moc=null}getLatestMocVersion(){return Live2DCubismCore.Version.csmGetLatestMocVersion()}getMocVersion(){return this._mocVersion}}!function(t){t.CubismMoc=_s}(hs||(hs={}));const ms="Meta",ps="UserData";class fs{constructor(t,e){this._json=F.create(t,e)}release(){F.delete(this._json)}getUserDataCount(){return this._json.getRoot().getValueByString(ms).getValueByString("UserDataCount").toInt()}getTotalUserDataSize(){return this._json.getRoot().getValueByString(ms).getValueByString("TotalUserDataSize").toInt()}getUserDataTargetType(t){return this._json.getRoot().getValueByString(ps).getValueByIndex(t).getValueByString("Target").getRawString()}getUserDataId(t){return W.getIdManager().getId(this._json.getRoot().getValueByString(ps).getValueByIndex(t).getValueByString("Id").getRawString())}getUserDataValue(t){return this._json.getRoot().getValueByString(ps).getValueByIndex(t).getValueByString("Value").getRawString()}}var ys,Ss,xs;!function(t){t.CubismModelUserDataJson=fs}(ys||(ys={}));class Cs{}class bs{static create(t,e){const i=new bs;return i.parseUserData(t,e),i}static delete(t){null!=t&&(t.release(),t=null)}getArtMeshUserDatas(){return this._artMeshUserDataNode}parseUserData(t,e){let i=new fs(t,e);const s=W.getIdManager().getId("ArtMesh"),r=i.getUserDataCount();for(let t=0;t<r;t++){const e=new Cs;e.targetId=i.getUserDataId(t),e.targetType=W.getIdManager().getId(i.getUserDataTargetType(t)),e.value=new h(i.getUserDataValue(t)),this._userDataNodes.pushBack(e),e.targetType==s&&this._artMeshUserDataNode.pushBack(e)}i.release(),i=void 0}constructor(){this._userDataNodes=new t,this._artMeshUserDataNode=new t}release(){for(let t=0;t<this._userDataNodes.getSize();++t)this._userDataNodes.set(t,null);this._userDataNodes=null}}!function(t){t.CubismModelUserData=bs,t.CubismModelUserDataNode=Cs}(Ss||(Ss={}));class Bs{isInitialized(){return this._initialized}setInitialized(t){this._initialized=t}isUpdating(){return this._updating}setUpdating(t){this._updating=t}setDragging(t,e){this._dragManager.set(t,e)}setAcceleration(t,e,i){this._accelerationX=t,this._accelerationY=e,this._accelerationZ=i}getModelMatrix(){return this._modelMatrix}setOpacity(t){this._opacity=t}getOpacity(){return this._opacity}loadModel(t){this._moc=_s.create(t),null!=this._moc?(this._model=this._moc.createModel(),null!=this._model?(this._model.saveParameters(),this._modelMatrix=new re(this._model.getCanvasWidth(),this._model.getCanvasHeight())):b("Failed to CreateModel().")):b("Failed to CubismMoc.create().")}loadExpression(t,e,i){return ce.create(t,e)}loadPose(t,e){this._pose=$t.create(t,e)}loadUserData(t,e){this._modelUserData=bs.create(t,e)}loadPhysics(t,e){this._physics=Pi.create(t,e)}isHit(t,e,i){const s=this._model.getDrawableIndex(t);if(s<0)return!1;const r=this._model.getDrawableVertexCount(s),a=this._model.getDrawableVertices(s);let n=a[0],o=a[0],l=a[1],u=a[1];for(let t=1;t<r;++t){const e=a[Y.vertexOffset+t*Y.vertexStep],i=a[Y.vertexOffset+t*Y.vertexStep+1];e<n&&(n=e),e>o&&(o=e),i<l&&(l=i),i>u&&(u=i)}const h=this._modelMatrix.invertTransformX(e),c=this._modelMatrix.invertTransformY(i);return n<=h&&h<=o&&l<=c&&c<=u}getModel(){return this._model}getRenderer(){return this._renderer}createRenderer(t=1){this._renderer&&this.deleteRenderer(),this._renderer=new os,this._renderer.initialize(this._model,t)}deleteRenderer(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)}motionEventFired(t){x("{0}",t.s)}static cubismDefaultMotionEventCallback(t,e,i){null!=i&&i.motionEventFired(e)}constructor(){this.loadMotion=(t,e,i,s)=>ze.create(t,e,s),this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new $e,this._motionManager.setEventCallback(Bs.cubismDefaultMotionEventCallback,this),this._expressionManager=new $e,this._dragManager=new oe}release(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,$t.delete(this._pose),Ht.delete(this._eyeBlink),Gt.delete(this._breath),this._dragManager=null,Pi.delete(this._physics),bs.delete(this._modelUserData),this.deleteRenderer()}}!function(t){t.CubismUserModel=Bs}(xs||(xs={}));class ws{static loadFileAsBytes(t,e){fetch(t).then((t=>t.arrayBuffer())).then((t=>e(t,t.byteLength)))}static getDeltaTime(){return this.s_deltaTime}static updateTime(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame}static printMessage(t){console.log(t)}}ws.lastUpdate=Date.now(),ws.s_currentFrame=0,ws.s_lastFrame=0,ws.s_deltaTime=0;var Ps=function(t,e,i,s){return new(i||(i=Promise))((function(r,a){function n(t){try{l(s.next(t))}catch(t){a(t)}}function o(t){try{l(s.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,o)}l((s=s.apply(t,e||[])).next())}))};let vs=null;class Ms{static getInstance(){return null==vs&&(vs=new Ms),vs}static releaseInstance(){null!=vs&&(vs=void 0),vs=null}update(t){let e,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=t,e=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate),e>this._wavFileInfo._samplesPerChannel&&(e=this._wavFileInfo._samplesPerChannel),i=0;for(let t=0;t<this._wavFileInfo._numberOfChannels;t++)for(let s=this._sampleOffset;s<e;s++){const e=this._pcmData[t][s];i+=e*e}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(e-this._sampleOffset))),this._lastRms=i,this._sampleOffset=e,!0}start(t){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(t)}getRms(){return this._lastRms}loadWavFile(t){let e=!1;null!=this._pcmData&&this.releasePcmData();const i=()=>Ps(this,void 0,void 0,(function*(){return fetch(t).then((t=>t.arrayBuffer()))}));return(()=>{Ps(this,void 0,void 0,(function*(){if(this._byteReader._fileByte=yield i(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return!1;this._wavFileInfo._fileName=t;try{if(!this._byteReader.getCheckSignature("RIFF"))throw e=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw e=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw e=!1,new Error('Cannot find Signeture "fmt".');const t=this._byteReader.get32LittleEndian();if(1!=this._byteReader.get16LittleEndian())throw e=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),t>16&&(this._byteReader._readOffset+=t-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw e=!1,new Error('Cannot find "data" Chunk.');{const t=this._byteReader.get32LittleEndian();this._wavFileInfo._samplesPerChannel=8*t/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels)}this._pcmData=new Array(this._wavFileInfo._numberOfChannels);for(let t=0;t<this._wavFileInfo._numberOfChannels;t++)this._pcmData[t]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(let t=0;t<this._wavFileInfo._samplesPerChannel;t++)for(let e=0;e<this._wavFileInfo._numberOfChannels;e++)this._pcmData[e][t]=this.getPcmSample();e=!0}catch(t){console.log(t)}}))})(),e}getPcmSample(){let t;switch(this._wavFileInfo._bitsPerSample){case 8:t=this._byteReader.get8()-128,t<<=24;break;case 16:t=this._byteReader.get16LittleEndian()<<16;break;case 24:t=this._byteReader.get24LittleEndian()<<8;break;default:t=0}return t/2147483647}releasePcmData(){for(let t=0;t<this._wavFileInfo._numberOfChannels;t++)delete this._pcmData[t];delete this._pcmData,this._pcmData=null}constructor(){this._loadFiletoBytes=(t,e)=>{this._byteReader._fileByte=t,this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=e},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new Ts,this._byteReader=new Es}}class Ts{constructor(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0}}class Es{constructor(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}get8(){const t=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,t}get16LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,t}get24LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,t}get32LittleEndian(){const t=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,t}getCheckSignature(t){const e=new Uint8Array(4),i=(new TextEncoder).encode(t);if(4!=t.length)return!1;for(let t=0;t<4;t++)e[t]=this.get8();return e[0]==i[0]&&e[1]==i[1]&&e[2]==i[2]&&e[3]==i[3]}}function Is(t,e){return function(){return t.apply(e,arguments)}}const{toString:Rs}=Object.prototype,{getPrototypeOf:Fs}=Object,Vs=(As=Object.create(null),t=>{const e=Rs.call(t);return As[e]||(As[e]=e.slice(8,-1).toLowerCase())});var As;const Ls=t=>(t=t.toLowerCase(),e=>Vs(e)===t),Ds=t=>e=>typeof e===t,{isArray:ks}=Array,Os=Ds("undefined"),Ns=Ls("ArrayBuffer"),Us=Ds("string"),zs=Ds("function"),js=Ds("number"),Xs=t=>null!==t&&"object"==typeof t,qs=t=>{if("object"!==Vs(t))return!1;const e=Fs(t);return!(null!==e&&e!==Object.prototype&&null!==Object.getPrototypeOf(e)||Symbol.toStringTag in t||Symbol.iterator in t)},Gs=Ls("Date"),Ys=Ls("File"),Hs=Ls("Blob"),Ws=Ls("FileList"),Js=Ls("URLSearchParams");function $s(t,e,{allOwnKeys:i=!1}={}){if(null==t)return;let s,r;if("object"!=typeof t&&(t=[t]),ks(t))for(s=0,r=t.length;s<r;s++)e.call(null,t[s],s,t);else{const r=i?Object.getOwnPropertyNames(t):Object.keys(t),a=r.length;let n;for(s=0;s<a;s++)n=r[s],e.call(null,t[n],n,t)}}function Ks(t,e){e=e.toLowerCase();const i=Object.keys(t);let s,r=i.length;for(;r-- >0;)if(s=i[r],e===s.toLowerCase())return s;return null}const Zs="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Qs=t=>!Os(t)&&t!==Zs,tr=(er="undefined"!=typeof Uint8Array&&Fs(Uint8Array),t=>er&&t instanceof er);var er;const ir=Ls("HTMLFormElement"),sr=(({hasOwnProperty:t})=>(e,i)=>t.call(e,i))(Object.prototype),rr=Ls("RegExp"),ar=(t,e)=>{const i=Object.getOwnPropertyDescriptors(t),s={};$s(i,((i,r)=>{!1!==e(i,r,t)&&(s[r]=i)})),Object.defineProperties(t,s)},nr="abcdefghijklmnopqrstuvwxyz",or="0123456789",lr={DIGIT:or,ALPHA:nr,ALPHA_DIGIT:nr+nr.toUpperCase()+or};var ur={isArray:ks,isArrayBuffer:Ns,isBuffer:function(t){return null!==t&&!Os(t)&&null!==t.constructor&&!Os(t.constructor)&&zs(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{const e="[object FormData]";return t&&("function"==typeof FormData&&t instanceof FormData||Rs.call(t)===e||zs(t.toString)&&t.toString()===e)},isArrayBufferView:function(t){let e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&Ns(t.buffer),e},isString:Us,isNumber:js,isBoolean:t=>!0===t||!1===t,isObject:Xs,isPlainObject:qs,isUndefined:Os,isDate:Gs,isFile:Ys,isBlob:Hs,isRegExp:rr,isFunction:zs,isStream:t=>Xs(t)&&zs(t.pipe),isURLSearchParams:Js,isTypedArray:tr,isFileList:Ws,forEach:$s,merge:function t(){const{caseless:e}=Qs(this)&&this||{},i={},s=(s,r)=>{const a=e&&Ks(i,r)||r;qs(i[a])&&qs(s)?i[a]=t(i[a],s):qs(s)?i[a]=t({},s):ks(s)?i[a]=s.slice():i[a]=s};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&$s(arguments[t],s);return i},extend:(t,e,i,{allOwnKeys:s}={})=>($s(e,((e,s)=>{i&&zs(e)?t[s]=Is(e,i):t[s]=e}),{allOwnKeys:s}),t),trim:t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,i,s)=>{t.prototype=Object.create(e.prototype,s),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),i&&Object.assign(t.prototype,i)},toFlatObject:(t,e,i,s)=>{let r,a,n;const o={};if(e=e||{},null==t)return e;do{for(r=Object.getOwnPropertyNames(t),a=r.length;a-- >0;)n=r[a],s&&!s(n,t,e)||o[n]||(e[n]=t[n],o[n]=!0);t=!1!==i&&Fs(t)}while(t&&(!i||i(t,e))&&t!==Object.prototype);return e},kindOf:Vs,kindOfTest:Ls,endsWith:(t,e,i)=>{t=String(t),(void 0===i||i>t.length)&&(i=t.length),i-=e.length;const s=t.indexOf(e,i);return-1!==s&&s===i},toArray:t=>{if(!t)return null;if(ks(t))return t;let e=t.length;if(!js(e))return null;const i=new Array(e);for(;e-- >0;)i[e]=t[e];return i},forEachEntry:(t,e)=>{const i=(t&&t[Symbol.iterator]).call(t);let s;for(;(s=i.next())&&!s.done;){const i=s.value;e.call(t,i[0],i[1])}},matchAll:(t,e)=>{let i;const s=[];for(;null!==(i=t.exec(e));)s.push(i);return s},isHTMLForm:ir,hasOwnProperty:sr,hasOwnProp:sr,reduceDescriptors:ar,freezeMethods:t=>{ar(t,((e,i)=>{if(zs(t)&&-1!==["arguments","caller","callee"].indexOf(i))return!1;const s=t[i];zs(s)&&(e.enumerable=!1,"writable"in e?e.writable=!1:e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")}))}))},toObjectSet:(t,e)=>{const i={},s=t=>{t.forEach((t=>{i[t]=!0}))};return ks(t)?s(t):s(String(t).split(e)),i},toCamelCase:t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(t,e,i){return e.toUpperCase()+i})),noop:()=>{},toFiniteNumber:(t,e)=>(t=+t,Number.isFinite(t)?t:e),findKey:Ks,global:Zs,isContextDefined:Qs,ALPHABET:lr,generateString:(t=16,e=lr.ALPHA_DIGIT)=>{let i="";const{length:s}=e;for(;t--;)i+=e[Math.random()*s|0];return i},isSpecCompliantForm:function(t){return!!(t&&zs(t.append)&&"FormData"===t[Symbol.toStringTag]&&t[Symbol.iterator])},toJSONObject:t=>{const e=new Array(10),i=(t,s)=>{if(Xs(t)){if(e.indexOf(t)>=0)return;if(!("toJSON"in t)){e[s]=t;const r=ks(t)?[]:{};return $s(t,((t,e)=>{const a=i(t,s+1);!Os(a)&&(r[e]=a)})),e[s]=void 0,r}}return t};return i(t,0)}};function hr(t,e,i,s,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=t,this.name="AxiosError",e&&(this.code=e),i&&(this.config=i),s&&(this.request=s),r&&(this.response=r)}ur.inherits(hr,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:ur.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const cr=hr.prototype,dr={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((t=>{dr[t]={value:t}})),Object.defineProperties(hr,dr),Object.defineProperty(cr,"isAxiosError",{value:!0}),hr.from=(t,e,i,s,r,a)=>{const n=Object.create(cr);return ur.toFlatObject(t,n,(function(t){return t!==Error.prototype}),(t=>"isAxiosError"!==t)),hr.call(n,t.message,e,i,s,r),n.cause=t,n.name=t.name,a&&Object.assign(n,a),n};var gr=hr;function _r(t){return ur.isPlainObject(t)||ur.isArray(t)}function mr(t){return ur.endsWith(t,"[]")?t.slice(0,-2):t}function pr(t,e,i){return t?t.concat(e).map((function(t,e){return t=mr(t),!i&&e?"["+t+"]":t})).join(i?".":""):e}const fr=ur.toFlatObject(ur,{},null,(function(t){return/^is[A-Z]/.test(t)}));var yr=function(t,e,i){if(!ur.isObject(t))throw new TypeError("target must be an object");e=e||new FormData;const s=(i=ur.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(t,e){return!ur.isUndefined(e[t])}))).metaTokens,r=i.visitor||u,a=i.dots,n=i.indexes,o=(i.Blob||"undefined"!=typeof Blob&&Blob)&&ur.isSpecCompliantForm(e);if(!ur.isFunction(r))throw new TypeError("visitor must be a function");function l(t){if(null===t)return"";if(ur.isDate(t))return t.toISOString();if(!o&&ur.isBlob(t))throw new gr("Blob is not supported. Use a Buffer instead.");return ur.isArrayBuffer(t)||ur.isTypedArray(t)?o&&"function"==typeof Blob?new Blob([t]):Buffer.from(t):t}function u(t,i,r){let o=t;if(t&&!r&&"object"==typeof t)if(ur.endsWith(i,"{}"))i=s?i:i.slice(0,-2),t=JSON.stringify(t);else if(ur.isArray(t)&&function(t){return ur.isArray(t)&&!t.some(_r)}(t)||(ur.isFileList(t)||ur.endsWith(i,"[]"))&&(o=ur.toArray(t)))return i=mr(i),o.forEach((function(t,s){!ur.isUndefined(t)&&null!==t&&e.append(!0===n?pr([i],s,a):null===n?i:i+"[]",l(t))})),!1;return!!_r(t)||(e.append(pr(r,i,a),l(t)),!1)}const h=[],c=Object.assign(fr,{defaultVisitor:u,convertValue:l,isVisitable:_r});if(!ur.isObject(t))throw new TypeError("data must be an object");return function t(i,s){if(!ur.isUndefined(i)){if(-1!==h.indexOf(i))throw Error("Circular reference detected in "+s.join("."));h.push(i),ur.forEach(i,(function(i,a){!0===(!(ur.isUndefined(i)||null===i)&&r.call(e,i,ur.isString(a)?a.trim():a,s,c))&&t(i,s?s.concat(a):[a])})),h.pop()}}(t),e};function Sr(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,(function(t){return e[t]}))}function xr(t,e){this._pairs=[],t&&yr(t,this,e)}const Cr=xr.prototype;Cr.append=function(t,e){this._pairs.push([t,e])},Cr.toString=function(t){const e=t?function(e){return t.call(this,e,Sr)}:Sr;return this._pairs.map((function(t){return e(t[0])+"="+e(t[1])}),"").join("&")};var br=xr;function Br(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function wr(t,e,i){if(!e)return t;const s=i&&i.encode||Br,r=i&&i.serialize;let a;if(a=r?r(e,i):ur.isURLSearchParams(e)?e.toString():new br(e,i).toString(s),a){const e=t.indexOf("#");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf("?")?"?":"&")+a}return t}var Pr=class{constructor(){this.handlers=[]}use(t,e,i){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!i&&i.synchronous,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){ur.forEach(this.handlers,(function(e){null!==e&&t(e)}))}},vr={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Mr={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:br,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let t;return("undefined"==typeof navigator||"ReactNative"!==(t=navigator.product)&&"NativeScript"!==t&&"NS"!==t)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},Tr=function(t){function e(t,i,s,r){let a=t[r++];const n=Number.isFinite(+a),o=r>=t.length;return a=!a&&ur.isArray(s)?s.length:a,o?(ur.hasOwnProp(s,a)?s[a]=[s[a],i]:s[a]=i,!n):(s[a]&&ur.isObject(s[a])||(s[a]=[]),e(t,i,s[a],r)&&ur.isArray(s[a])&&(s[a]=function(t){const e={},i=Object.keys(t);let s;const r=i.length;let a;for(s=0;s<r;s++)a=i[s],e[a]=t[a];return e}(s[a])),!n)}if(ur.isFormData(t)&&ur.isFunction(t.entries)){const i={};return ur.forEachEntry(t,((t,s)=>{e(function(t){return ur.matchAll(/\w+|\[(\w*)]/g,t).map((t=>"[]"===t[0]?"":t[1]||t[0]))}(t),s,i,0)})),i}return null};const Er={"Content-Type":void 0},Ir={transitional:vr,adapter:["xhr","http"],transformRequest:[function(t,e){const i=e.getContentType()||"",s=i.indexOf("application/json")>-1,r=ur.isObject(t);if(r&&ur.isHTMLForm(t)&&(t=new FormData(t)),ur.isFormData(t))return s&&s?JSON.stringify(Tr(t)):t;if(ur.isArrayBuffer(t)||ur.isBuffer(t)||ur.isStream(t)||ur.isFile(t)||ur.isBlob(t))return t;if(ur.isArrayBufferView(t))return t.buffer;if(ur.isURLSearchParams(t))return e.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let a;if(r){if(i.indexOf("application/x-www-form-urlencoded")>-1)return function(t,e){return yr(t,new Mr.classes.URLSearchParams,Object.assign({visitor:function(t,e,i,s){return Mr.isNode&&ur.isBuffer(t)?(this.append(e,t.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},e))}(t,this.formSerializer).toString();if((a=ur.isFileList(t))||i.indexOf("multipart/form-data")>-1){const e=this.env&&this.env.FormData;return yr(a?{"files[]":t}:t,e&&new e,this.formSerializer)}}return r||s?(e.setContentType("application/json",!1),function(t,e,i){if(ur.isString(t))try{return(0,JSON.parse)(t),ur.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){const e=this.transitional||Ir.transitional,i=e&&e.forcedJSONParsing,s="json"===this.responseType;if(t&&ur.isString(t)&&(i&&!this.responseType||s)){const i=!(e&&e.silentJSONParsing)&&s;try{return JSON.parse(t)}catch(t){if(i){if("SyntaxError"===t.name)throw gr.from(t,gr.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Mr.classes.FormData,Blob:Mr.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};ur.forEach(["delete","get","head"],(function(t){Ir.headers[t]={}})),ur.forEach(["post","put","patch"],(function(t){Ir.headers[t]=ur.merge(Er)}));var Rr=Ir;const Fr=ur.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Vr=Symbol("internals");function Ar(t){return t&&String(t).trim().toLowerCase()}function Lr(t){return!1===t||null==t?t:ur.isArray(t)?t.map(Lr):String(t)}function Dr(t,e,i,s,r){return ur.isFunction(s)?s.call(this,e,i):(r&&(e=i),ur.isString(e)?ur.isString(s)?-1!==e.indexOf(s):ur.isRegExp(s)?s.test(e):void 0:void 0)}class kr{constructor(t){t&&this.set(t)}set(t,e,i){const s=this;function r(t,e,i){const r=Ar(e);if(!r)throw new Error("header name must be a non-empty string");const a=ur.findKey(s,r);(!a||void 0===s[a]||!0===i||void 0===i&&!1!==s[a])&&(s[a||e]=Lr(t))}const a=(t,e)=>ur.forEach(t,((t,i)=>r(t,i,e)));return ur.isPlainObject(t)||t instanceof this.constructor?a(t,e):ur.isString(t)&&(t=t.trim())&&!/^[-_a-zA-Z]+$/.test(t.trim())?a((t=>{const e={};let i,s,r;return t&&t.split("\n").forEach((function(t){r=t.indexOf(":"),i=t.substring(0,r).trim().toLowerCase(),s=t.substring(r+1).trim(),!i||e[i]&&Fr[i]||("set-cookie"===i?e[i]?e[i].push(s):e[i]=[s]:e[i]=e[i]?e[i]+", "+s:s)})),e})(t),e):null!=t&&r(e,t,i),this}get(t,e){if(t=Ar(t)){const i=ur.findKey(this,t);if(i){const t=this[i];if(!e)return t;if(!0===e)return function(t){const e=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let s;for(;s=i.exec(t);)e[s[1]]=s[2];return e}(t);if(ur.isFunction(e))return e.call(this,t,i);if(ur.isRegExp(e))return e.exec(t);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,e){if(t=Ar(t)){const i=ur.findKey(this,t);return!(!i||void 0===this[i]||e&&!Dr(0,this[i],i,e))}return!1}delete(t,e){const i=this;let s=!1;function r(t){if(t=Ar(t)){const r=ur.findKey(i,t);!r||e&&!Dr(0,i[r],r,e)||(delete i[r],s=!0)}}return ur.isArray(t)?t.forEach(r):r(t),s}clear(t){const e=Object.keys(this);let i=e.length,s=!1;for(;i--;){const r=e[i];t&&!Dr(0,this[r],r,t,!0)||(delete this[r],s=!0)}return s}normalize(t){const e=this,i={};return ur.forEach(this,((s,r)=>{const a=ur.findKey(i,r);if(a)return e[a]=Lr(s),void delete e[r];const n=t?function(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((t,e,i)=>e.toUpperCase()+i))}(r):String(r).trim();n!==r&&delete e[r],e[n]=Lr(s),i[n]=!0})),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const e=Object.create(null);return ur.forEach(this,((i,s)=>{null!=i&&!1!==i&&(e[s]=t&&ur.isArray(i)?i.join(", "):i)})),e}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([t,e])=>t+": "+e)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...e){const i=new this(t);return e.forEach((t=>i.set(t))),i}static accessor(t){const e=(this[Vr]=this[Vr]={accessors:{}}).accessors,i=this.prototype;function s(t){const s=Ar(t);e[s]||(function(t,e){const i=ur.toCamelCase(" "+e);["get","set","has"].forEach((s=>{Object.defineProperty(t,s+i,{value:function(t,i,r){return this[s].call(this,e,t,i,r)},configurable:!0})}))}(i,t),e[s]=!0)}return ur.isArray(t)?t.forEach(s):s(t),this}}kr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),ur.freezeMethods(kr.prototype),ur.freezeMethods(kr);var Or=kr;function Nr(t,e){const i=this||Rr,s=e||i,r=Or.from(s.headers);let a=s.data;return ur.forEach(t,(function(t){a=t.call(i,a,r.normalize(),e?e.status:void 0)})),r.normalize(),a}function Ur(t){return!(!t||!t.__CANCEL__)}function zr(t,e,i){gr.call(this,null==t?"canceled":t,gr.ERR_CANCELED,e,i),this.name="CanceledError"}ur.inherits(zr,gr,{__CANCEL__:!0});var jr=zr,Xr=Mr.isStandardBrowserEnv?{write:function(t,e,i,s,r,a){const n=[];n.push(t+"="+encodeURIComponent(e)),ur.isNumber(i)&&n.push("expires="+new Date(i).toGMTString()),ur.isString(s)&&n.push("path="+s),ur.isString(r)&&n.push("domain="+r),!0===a&&n.push("secure"),document.cookie=n.join("; ")},read:function(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function qr(t,e){return t&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)?function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}(t,e):e}var Gr=Mr.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");let i;function s(i){let s=i;return t&&(e.setAttribute("href",s),s=e.href),e.setAttribute("href",s),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return i=s(window.location.href),function(t){const e=ur.isString(t)?s(t):t;return e.protocol===i.protocol&&e.host===i.host}}():function(){return!0};function Yr(t,e){let i=0;const s=function(t,e){t=t||10;const i=new Array(t),s=new Array(t);let r,a=0,n=0;return e=void 0!==e?e:1e3,function(o){const l=Date.now(),u=s[n];r||(r=l),i[a]=o,s[a]=l;let h=n,c=0;for(;h!==a;)c+=i[h++],h%=t;if(a=(a+1)%t,a===n&&(n=(n+1)%t),l-r<e)return;const d=u&&l-u;return d?Math.round(1e3*c/d):void 0}}(50,250);return r=>{const a=r.loaded,n=r.lengthComputable?r.total:void 0,o=a-i,l=s(o);i=a;const u={loaded:a,total:n,progress:n?a/n:void 0,bytes:o,rate:l||void 0,estimated:l&&n&&a<=n?(n-a)/l:void 0,event:r};u[e?"download":"upload"]=!0,t(u)}}const Hr={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(t){return new Promise((function(e,i){let s=t.data;const r=Or.from(t.headers).normalize(),a=t.responseType;let n;function o(){t.cancelToken&&t.cancelToken.unsubscribe(n),t.signal&&t.signal.removeEventListener("abort",n)}ur.isFormData(s)&&(Mr.isStandardBrowserEnv||Mr.isStandardBrowserWebWorkerEnv)&&r.setContentType(!1);let l=new XMLHttpRequest;if(t.auth){const e=t.auth.username||"",i=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";r.set("Authorization","Basic "+btoa(e+":"+i))}const u=qr(t.baseURL,t.url);function h(){if(!l)return;const s=Or.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(t,e,i){const s=i.config.validateStatus;i.status&&s&&!s(i.status)?e(new gr("Request failed with status code "+i.status,[gr.ERR_BAD_REQUEST,gr.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i)):t(i)}((function(t){e(t),o()}),(function(t){i(t),o()}),{data:a&&"text"!==a&&"json"!==a?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:s,config:t,request:l}),l=null}if(l.open(t.method.toUpperCase(),wr(u,t.params,t.paramsSerializer),!0),l.timeout=t.timeout,"onloadend"in l?l.onloadend=h:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(h)},l.onabort=function(){l&&(i(new gr("Request aborted",gr.ECONNABORTED,t,l)),l=null)},l.onerror=function(){i(new gr("Network Error",gr.ERR_NETWORK,t,l)),l=null},l.ontimeout=function(){let e=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded";const s=t.transitional||vr;t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),i(new gr(e,s.clarifyTimeoutError?gr.ETIMEDOUT:gr.ECONNABORTED,t,l)),l=null},Mr.isStandardBrowserEnv){const e=(t.withCredentials||Gr(u))&&t.xsrfCookieName&&Xr.read(t.xsrfCookieName);e&&r.set(t.xsrfHeaderName,e)}void 0===s&&r.setContentType(null),"setRequestHeader"in l&&ur.forEach(r.toJSON(),(function(t,e){l.setRequestHeader(e,t)})),ur.isUndefined(t.withCredentials)||(l.withCredentials=!!t.withCredentials),a&&"json"!==a&&(l.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&l.addEventListener("progress",Yr(t.onDownloadProgress,!0)),"function"==typeof t.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",Yr(t.onUploadProgress)),(t.cancelToken||t.signal)&&(n=e=>{l&&(i(!e||e.type?new jr(null,t,l):e),l.abort(),l=null)},t.cancelToken&&t.cancelToken.subscribe(n),t.signal&&(t.signal.aborted?n():t.signal.addEventListener("abort",n)));const c=function(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}(u);c&&-1===Mr.protocols.indexOf(c)?i(new gr("Unsupported protocol "+c+":",gr.ERR_BAD_REQUEST,t)):l.send(s||null)}))}};ur.forEach(Hr,((t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch(t){}Object.defineProperty(t,"adapterName",{value:e})}}));function Wr(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new jr(null,t)}function Jr(t){return Wr(t),t.headers=Or.from(t.headers),t.data=Nr.call(t,t.transformRequest),-1!==["post","put","patch"].indexOf(t.method)&&t.headers.setContentType("application/x-www-form-urlencoded",!1),(t=>{t=ur.isArray(t)?t:[t];const{length:e}=t;let i,s;for(let r=0;r<e&&(i=t[r],!(s=ur.isString(i)?Hr[i.toLowerCase()]:i));r++);if(!s){if(!1===s)throw new gr(`Adapter ${i} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(ur.hasOwnProp(Hr,i)?`Adapter '${i}' is not available in the build`:`Unknown adapter '${i}'`)}if(!ur.isFunction(s))throw new TypeError("adapter is not a function");return s})(t.adapter||Rr.adapter)(t).then((function(e){return Wr(t),e.data=Nr.call(t,t.transformResponse,e),e.headers=Or.from(e.headers),e}),(function(e){return Ur(e)||(Wr(t),e&&e.response&&(e.response.data=Nr.call(t,t.transformResponse,e.response),e.response.headers=Or.from(e.response.headers))),Promise.reject(e)}))}const $r=t=>t instanceof Or?t.toJSON():t;function Kr(t,e){e=e||{};const i={};function s(t,e,i){return ur.isPlainObject(t)&&ur.isPlainObject(e)?ur.merge.call({caseless:i},t,e):ur.isPlainObject(e)?ur.merge({},e):ur.isArray(e)?e.slice():e}function r(t,e,i){return ur.isUndefined(e)?ur.isUndefined(t)?void 0:s(void 0,t,i):s(t,e,i)}function a(t,e){if(!ur.isUndefined(e))return s(void 0,e)}function n(t,e){return ur.isUndefined(e)?ur.isUndefined(t)?void 0:s(void 0,t):s(void 0,e)}function o(i,r,a){return a in e?s(i,r):a in t?s(void 0,i):void 0}const l={url:a,method:a,data:a,baseURL:n,transformRequest:n,transformResponse:n,paramsSerializer:n,timeout:n,timeoutMessage:n,withCredentials:n,adapter:n,responseType:n,xsrfCookieName:n,xsrfHeaderName:n,onUploadProgress:n,onDownloadProgress:n,decompress:n,maxContentLength:n,maxBodyLength:n,beforeRedirect:n,transport:n,httpAgent:n,httpsAgent:n,cancelToken:n,socketPath:n,responseEncoding:n,validateStatus:o,headers:(t,e)=>r($r(t),$r(e),!0)};return ur.forEach(Object.keys(t).concat(Object.keys(e)),(function(s){const a=l[s]||r,n=a(t[s],e[s],s);ur.isUndefined(n)&&a!==o||(i[s]=n)})),i}const Zr={};["object","boolean","number","function","string","symbol"].forEach(((t,e)=>{Zr[t]=function(i){return typeof i===t||"a"+(e<1?"n ":" ")+t}}));const Qr={};Zr.transitional=function(t,e,i){function s(t,e){return"[Axios v1.3.4] Transitional option '"+t+"'"+e+(i?". "+i:"")}return(i,r,a)=>{if(!1===t)throw new gr(s(r," has been removed"+(e?" in "+e:"")),gr.ERR_DEPRECATED);return e&&!Qr[r]&&(Qr[r]=!0,console.warn(s(r," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(i,r,a)}};var ta={assertOptions:function(t,e,i){if("object"!=typeof t)throw new gr("options must be an object",gr.ERR_BAD_OPTION_VALUE);const s=Object.keys(t);let r=s.length;for(;r-- >0;){const a=s[r],n=e[a];if(n){const e=t[a],i=void 0===e||n(e,a,t);if(!0!==i)throw new gr("option "+a+" must be "+i,gr.ERR_BAD_OPTION_VALUE)}else if(!0!==i)throw new gr("Unknown option "+a,gr.ERR_BAD_OPTION)}},validators:Zr};const ea=ta.validators;class ia{constructor(t){this.defaults=t,this.interceptors={request:new Pr,response:new Pr}}request(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},e=Kr(this.defaults,e);const{transitional:i,paramsSerializer:s,headers:r}=e;let a;void 0!==i&&ta.assertOptions(i,{silentJSONParsing:ea.transitional(ea.boolean),forcedJSONParsing:ea.transitional(ea.boolean),clarifyTimeoutError:ea.transitional(ea.boolean)},!1),void 0!==s&&ta.assertOptions(s,{encode:ea.function,serialize:ea.function},!0),e.method=(e.method||this.defaults.method||"get").toLowerCase(),a=r&&ur.merge(r.common,r[e.method]),a&&ur.forEach(["delete","get","head","post","put","patch","common"],(t=>{delete r[t]})),e.headers=Or.concat(a,r);const n=[];let o=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(o=o&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));const l=[];let u;this.interceptors.response.forEach((function(t){l.push(t.fulfilled,t.rejected)}));let h,c=0;if(!o){const t=[Jr.bind(this),void 0];for(t.unshift.apply(t,n),t.push.apply(t,l),h=t.length,u=Promise.resolve(e);c<h;)u=u.then(t[c++],t[c++]);return u}h=n.length;let d=e;for(c=0;c<h;){const t=n[c++],e=n[c++];try{d=t(d)}catch(t){e.call(this,t);break}}try{u=Jr.call(this,d)}catch(t){return Promise.reject(t)}for(c=0,h=l.length;c<h;)u=u.then(l[c++],l[c++]);return u}getUri(t){return wr(qr((t=Kr(this.defaults,t)).baseURL,t.url),t.params,t.paramsSerializer)}}ur.forEach(["delete","get","head","options"],(function(t){ia.prototype[t]=function(e,i){return this.request(Kr(i||{},{method:t,url:e,data:(i||{}).data}))}})),ur.forEach(["post","put","patch"],(function(t){function e(e){return function(i,s,r){return this.request(Kr(r||{},{method:t,headers:e?{"Content-Type":"multipart/form-data"}:{},url:i,data:s}))}}ia.prototype[t]=e(),ia.prototype[t+"Form"]=e(!0)}));var sa=ia;class ra{constructor(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");let e;this.promise=new Promise((function(t){e=t}));const i=this;this.promise.then((t=>{if(!i._listeners)return;let e=i._listeners.length;for(;e-- >0;)i._listeners[e](t);i._listeners=null})),this.promise.then=t=>{let e;const s=new Promise((t=>{i.subscribe(t),e=t})).then(t);return s.cancel=function(){i.unsubscribe(e)},s},t((function(t,s,r){i.reason||(i.reason=new jr(t,s,r),e(i.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}static source(){let t;return{token:new ra((function(e){t=e})),cancel:t}}}var aa=ra;const na={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(na).forEach((([t,e])=>{na[e]=t}));var oa=na;const la=function t(e){const i=new sa(e),s=Is(sa.prototype.request,i);return ur.extend(s,sa.prototype,i,{allOwnKeys:!0}),ur.extend(s,i,null,{allOwnKeys:!0}),s.create=function(i){return t(Kr(e,i))},s}(Rr);la.Axios=sa,la.CanceledError=jr,la.CancelToken=aa,la.isCancel=Ur,la.VERSION="1.3.4",la.toFormData=yr,la.AxiosError=gr,la.Cancel=la.CanceledError,la.all=function(t){return Promise.all(t)},la.spread=function(t){return function(e){return t.apply(null,e)}},la.isAxiosError=function(t){return ur.isObject(t)&&!0===t.isAxiosError},la.mergeConfig=Kr,la.AxiosHeaders=Or,la.formToJSON=t=>Tr(ur.isHTMLForm(t)?new FormData(t):t),la.HttpStatusCode=oa,la.default=la;var ua=la,ha=i(696),ca=function(t,e,i,s){return new(i||(i=Promise))((function(r,a){function n(t){try{l(s.next(t))}catch(t){a(t)}}function o(t){try{l(s.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,o)}l((s=s.apply(t,e||[])).next())}))};let da=null,ga=null;class _a{get receiving(){return this._receiving}set receiving(t){this._receiving=t,t?(this.messageInput.disabled=!0,this.recordButton.disabled=!0,this.recordButton.style.opacity="0.5"):(this.messageInput.disabled=!1,this.recordButton.disabled=!1,this.recordButton.style.opacity="1.0")}static getInstance(){return null==da&&(da=new _a),da}constructor(){this.mood=.4,this.audioHelper=ma.getInstance(),this.recordButton=document.getElementById("record-button"),this.captionsButton=document.getElementById("captions-button"),this.languageButton=document.getElementById("language-button"),this.reloadButton=document.getElementById("reload-button"),this.messageInput=document.getElementById("message-input"),this.captionsTextarea=document.getElementById("captions-textarea"),navigator.mediaDevices&&(this.recordButton.style.visibility="visible"),this.reloadButton.addEventListener("click",(()=>{ua.get("/reset_context").then((t=>{0==t.data.code?(this.message="",this.translatedMessage="",this.setCaption(),console.log("Reset Context: Success.")):console.log("Reset Context: Failed.")}))})),this.captionsStatus=0,this.captionsButton.addEventListener("click",(()=>{0==this.captionsStatus?(this.captionsStatus=1,this.captionsTextarea.style.visibility="visible"):1==this.captionsStatus?(this.captionsStatus=2,this.captionsTextarea.style.visibility="visible"):2==this.captionsStatus&&(this.captionsStatus=0,this.captionsTextarea.style.visibility="hidden"),this.setCaption()})),this.language="zh",this.languageButton.addEventListener("click",(()=>{const t=this.languageButton.querySelector("img");"ja"==this.language?(this.language="zh",t.src="/static/images/zh.png",console.log("Language: zh")):"zh"==this.language&&(this.language="ja",t.src="/static/images/ja.png",console.log("Language: ja"))})),this.messageInput.addEventListener("keydown",(t=>{13==t.keyCode&&(this.chatComplete(this.messageInput.value).then((t=>{this.handleMessage(t)})),this.messageInput.value="")})),this.recording=!1,this.recordButton.addEventListener("click",(()=>{const t=this.recordButton.querySelector("img");this.recording?this.audioRecorder.stop().then((({blob:e,buffer:i})=>{this.chatComplete(e).then((t=>{this.handleMessage(t)})),t.src="/static/images/record.png",this.recording=!1})):this.setupRecorder().then((e=>{e?this.audioRecorder.start().then((()=>{t.src="/static/images/recording.png",this.recording=!0})):this.recordButton.style.visibility="hidden"}))}))}setupRecorder(){return ca(this,void 0,void 0,(function*(){if(this.audioRecorder)return!0;this.audioRecorderContext=new AudioContext,this.audioRecorder=new ha.default(this.audioRecorderContext,{onAnalysed:t=>{}});try{let t=yield navigator.mediaDevices.getUserMedia({audio:!0});return yield this.audioRecorder.init(t),!0}catch(t){return console.log("Unable to get stream: ",t),!1}}))}chatComplete(t){return ca(this,void 0,void 0,(function*(){if(this.receiving=!0,t instanceof Blob){let e=new FormData;e.append("audio",t);let i=yield ua.post("/transcript",e);if(0!=i.data.code)return console.log("Transcript: Failed: "+i.data.code),"";t=i.data.result,console.log("Transcript: Success: "+i.data.result)}console.log("ChatComplete: Sending: "+t);let e=yield ua.get("/chat_complete?&text="+t);return 0==e.data.code?(console.log("ChatComplete: Success: "+e.data.message),e.data.message):(console.log("ChatComplete: Failed: "+e.data.code),"")}))}handleMessage(t){return ca(this,void 0,void 0,(function*(){""!=t&&(this.message=t,this.translatedMessage="",this.audioHelper.addTrack("/synthesis?text="+t),this.audioHelper.isPlaying||this.audioHelper.playNextTrack(),this.setCaption(),this.receiving=!1)}))}setCaption(){return ca(this,void 0,void 0,(function*(){if(1==this.captionsStatus){let t=yield this.translateMessage(this.message);this.captionsTextarea.value=t}else 2==this.captionsStatus?this.captionsTextarea.value=this.message:this.captionsTextarea.value=""}))}translateMessage(t){return ca(this,void 0,void 0,(function*(){if(this.translatedMessage)return this.translatedMessage;if(!this.message)return"";let e=yield ua.get("/translate?text="+t);return 0==e.data.code?(console.log("Translate: Success: "+e.data.result),this.translatedMessage=e.data.result,this.translatedMessage):(console.log("Translate: Failed: "+e.data.code),"")}))}}class ma{static getInstance(){return null==ga&&(ga=new ma),ga}constructor(){this.audioPlayer=document.getElementById("audio-player"),this.playList=[],this.isPlaying=!1,this.currentTrackIndex=0,this.audioPlayer.addEventListener("ended",(()=>{this.playNextTrack()}))}addTrack(t){if(this.playList.push(t),!this.analyser){const t=new AudioContext,e=t.createMediaElementSource(this.audioPlayer);this.analyser=t.createAnalyser(),e.connect(this.analyser),this.analyser.connect(t.destination)}}playNextTrack(){this.currentTrackIndex<this.playList.length?(this.isPlaying=!0,this.playTrack(this.currentTrackIndex),this.currentTrackIndex++):this.isPlaying=!1}playTrack(t){this.currentTrackIndex=t,this.audioPlayer.src=this.playList[t],this.audioPlayer.load(),this.audioPlayer.play()}getLevel(){if(this.analyser){const t=this.analyser.frequencyBinCount,e=new Uint8Array(t);return this.analyser.getByteFrequencyData(e),e.reduce(((t,e)=>t+e),0)/t}return 0}}var pa;!function(t){t[t.LoadAssets=0]="LoadAssets",t[t.LoadModel=1]="LoadModel",t[t.WaitLoadModel=2]="WaitLoadModel",t[t.LoadExpression=3]="LoadExpression",t[t.WaitLoadExpression=4]="WaitLoadExpression",t[t.LoadPhysics=5]="LoadPhysics",t[t.WaitLoadPhysics=6]="WaitLoadPhysics",t[t.LoadPose=7]="LoadPose",t[t.WaitLoadPose=8]="WaitLoadPose",t[t.SetupEyeBlink=9]="SetupEyeBlink",t[t.SetupBreath=10]="SetupBreath",t[t.LoadUserData=11]="LoadUserData",t[t.WaitLoadUserData=12]="WaitLoadUserData",t[t.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",t[t.SetupLipSyncIds=14]="SetupLipSyncIds",t[t.SetupLayout=15]="SetupLayout",t[t.LoadMotion=16]="LoadMotion",t[t.WaitLoadMotion=17]="WaitLoadMotion",t[t.CompleteInitialize=18]="CompleteInitialize",t[t.CompleteSetupModel=19]="CompleteSetupModel",t[t.LoadTexture=20]="LoadTexture",t[t.WaitLoadTexture=21]="WaitLoadTexture",t[t.CompleteSetup=22]="CompleteSetup"}(pa||(pa={}));class fa extends Bs{loadAssets(t,e){this._modelHomeDir=t,fetch(`${this._modelHomeDir}${e}`).then((t=>t.arrayBuffer())).then((t=>{const e=new qt(t,t.byteLength);this._state=pa.LoadModel,this.setupModel(e)}))}setupModel(e){if(this._updating=!0,this._initialized=!1,this._modelSetting=e,""!=this._modelSetting.getModelFileName()){const t=this._modelSetting.getModelFileName();fetch(`${this._modelHomeDir}${t}`).then((t=>t.arrayBuffer())).then((t=>{this.loadModel(t),this._state=pa.LoadExpression,i()})),this._state=pa.WaitLoadModel}else ws.printMessage("Model data does not exist.");const i=()=>{if(this._modelSetting.getExpressionCount()>0){const t=this._modelSetting.getExpressionCount();for(let e=0;e<t;e++){const i=this._modelSetting.getExpressionName(e),r=this._modelSetting.getExpressionFileName(e);fetch(`${this._modelHomeDir}${r}`).then((t=>t.arrayBuffer())).then((e=>{const r=this.loadExpression(e,e.byteLength,i);null!=this._expressions.getValue(i)&&(le.delete(this._expressions.getValue(i)),this._expressions.setValue(i,null)),this._expressions.setValue(i,r),this._expressionCount++,this._expressionCount>=t&&(this._state=pa.LoadPhysics,s())}))}this._state=pa.WaitLoadExpression}else this._state=pa.LoadPhysics,s()},s=()=>{if(""!=this._modelSetting.getPhysicsFileName()){const t=this._modelSetting.getPhysicsFileName();fetch(`${this._modelHomeDir}${t}`).then((t=>t.arrayBuffer())).then((t=>{this.loadPhysics(t,t.byteLength),this._state=pa.LoadPose,r()})),this._state=pa.WaitLoadPhysics}else this._state=pa.LoadPose,r()},r=()=>{if(""!=this._modelSetting.getPoseFileName()){const t=this._modelSetting.getPoseFileName();fetch(`${this._modelHomeDir}${t}`).then((t=>t.arrayBuffer())).then((t=>{this.loadPose(t,t.byteLength),this._state=pa.SetupEyeBlink,a()})),this._state=pa.WaitLoadPose}else this._state=pa.SetupEyeBlink,a()},a=()=>{this._modelSetting.getEyeBlinkParameterCount()>0&&(this._eyeBlink=Ht.create(this._modelSetting),this._state=pa.SetupBreath),n()},n=()=>{this._breath=Gt.create();const e=new t;e.pushBack(new Yt(this._idParamAngleX,0,15,6.5345,.5)),e.pushBack(new Yt(this._idParamAngleY,0,8,3.5345,.5)),e.pushBack(new Yt(this._idParamAngleZ,0,10,5.5345,.5)),e.pushBack(new Yt(this._idParamBodyAngleX,0,4,15.5345,.5)),e.pushBack(new Yt(W.getIdManager().getId(Pt.ParamBreath),.5,.5,3.2345,1)),this._breath.setParameters(e),this._state=pa.LoadUserData,o()},o=()=>{if(""!=this._modelSetting.getUserDataFile()){const t=this._modelSetting.getUserDataFile();fetch(`${this._modelHomeDir}${t}`).then((t=>t.arrayBuffer())).then((t=>{this.loadUserData(t,t.byteLength),this._state=pa.SetupEyeBlinkIds,l()})),this._state=pa.WaitLoadUserData}else this._state=pa.SetupEyeBlinkIds,l()},l=()=>{const t=this._modelSetting.getEyeBlinkParameterCount();for(let e=0;e<t;++e)this._eyeBlinkIds.pushBack(this._modelSetting.getEyeBlinkParameterId(e));this._state=pa.SetupLipSyncIds,u()},u=()=>{const t=this._modelSetting.getLipSyncParameterCount();for(let e=0;e<t;++e)this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(e));this._state=pa.SetupLayout,h()},h=()=>{const t=new M;null!=this._modelSetting&&null!=this._modelMatrix?(this._modelSetting.getLayoutMap(t),this._modelMatrix.setupFromLayout(t),this._state=pa.LoadMotion,c()):b("Failed to setupLayout().")},c=()=>{this._state=pa.WaitLoadMotion,this._model.saveParameters(),this._allMotionCount=0,this._motionCount=0;const t=[],e=this._modelSetting.getMotionGroupCount();for(let i=0;i<e;i++)t[i]=this._modelSetting.getMotionGroupName(i),this._allMotionCount+=this._modelSetting.getMotionCount(t[i]);for(let i=0;i<e;i++)this.preLoadMotionGroup(t[i]);0==e&&(this._state=pa.LoadTexture,this._motionManager.stopAllMotions(),this._updating=!1,this._initialized=!0,this.createRenderer(),this.setupTextures(),this.getRenderer().startUp(Ta))}}setupTextures(){if(this._state==pa.LoadTexture){const t=this._modelSetting.getTextureCount();for(let e=0;e<t;e++){if(""==this._modelSetting.getTextureFileName(e)){console.log("getTextureFileName null");continue}let i=this._modelSetting.getTextureFileName(e);i=this._modelHomeDir+i;const s=i=>{this.getRenderer().bindTexture(e,i.id),this._textureCount++,this._textureCount>=t&&(this._state=pa.CompleteSetup)};Ia.getInstance().getTextureManager().createTextureFromPngFile(i,!0,s),this.getRenderer().setIsPremultipliedAlpha(!0)}this._state=pa.WaitLoadTexture}}reloadRenderer(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()}update(){if(this._state!=pa.CompleteSetup)return;const t=ws.getDeltaTime();this._userTimeSeconds+=t,this._dragManager.update(t),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();let e=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion("Idle",1):e=this._motionManager.updateMotion(this._model,t),this._model.saveParameters(),e||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,t),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,t),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,t),null!=this._physics&&this._physics.evaluate(this._model,t),this._lipsync){let t=ma.getInstance().getLevel()/100;for(let e=0;e<this._lipSyncIds.getSize();++e)this._model.addParameterValueById(this._lipSyncIds.at(e),t,.8)}null!=this._pose&&this._pose.updateParameters(this._model,t),this._model.addParameterValueById(W.getIdManager().getId("ParamMouthForm"),_a.getInstance().mood,.8),this._model.update()}startMotion(t,e,i,s){if(3==i)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&ws.printMessage("[APP]can't start motion."),qe;const r=this._modelSetting.getMotionFileName(t,e),a=`${t}_${e}`;let n=this._motions.getValue(a),o=!1;null==n?fetch(`${this._modelHomeDir}${r}`).then((t=>t.arrayBuffer())).then((i=>{n=this.loadMotion(i,i.byteLength,null,s);let r=this._modelSetting.getMotionFadeInTimeValue(t,e);r>=0&&n.setFadeInTime(r),r=this._modelSetting.getMotionFadeOutTimeValue(t,e),r>=0&&n.setFadeOutTime(r),n.setEffectIds(this._eyeBlinkIds,this._lipSyncIds),o=!0})):n.setFinishedMotionHandler(s);const l=this._modelSetting.getMotionSoundFileName(t,e);if(0!=l.localeCompare("")){let t=l;t=this._modelHomeDir+t,this._wavFileHandler.start(t)}return this._debugMode&&ws.printMessage(`[APP]start motion: [${t}_${e}`),this._motionManager.startMotionPriority(n,o,i)}startRandomMotion(t,e,i){if(0==this._modelSetting.getMotionCount(t))return qe;const s=Math.floor(Math.random()*this._modelSetting.getMotionCount(t));return this.startMotion(t,s,e,i)}setExpression(t){const e=this._expressions.getValue(t);this._debugMode&&ws.printMessage(`[APP]expression: [${t}]`),null!=e?this._expressionManager.startMotionPriority(e,!1,3):this._debugMode&&ws.printMessage(`[APP]expression[${t}] is null`)}setRandomExpression(){if(0==this._expressions.getSize())return;const t=Math.floor(Math.random()*this._expressions.getSize());for(let e=0;e<this._expressions.getSize();e++)if(e==t){const t=this._expressions._keyValues[e].first;return void this.setExpression(t)}}motionEventFired(t){x("{0} is fired on LAppModel!!",t.s)}hitTest(t,e,i){if(this._opacity<1)return!1;const s=this._modelSetting.getHitAreasCount();for(let r=0;r<s;r++)if(this._modelSetting.getHitAreaName(r)==t){const t=this._modelSetting.getHitAreaId(r);return this.isHit(t,e,i)}return!1}preLoadMotionGroup(t){for(let e=0;e<this._modelSetting.getMotionCount(t);e++){const i=this._modelSetting.getMotionFileName(t,e),s=`${t}_${e}`;this._debugMode&&ws.printMessage(`[APP]load motion: ${i} => [${s}]`),fetch(`${this._modelHomeDir}${i}`).then((t=>t.arrayBuffer())).then((i=>{const r=this.loadMotion(i,i.byteLength,s);let a=this._modelSetting.getMotionFadeInTimeValue(t,e);a>=0&&r.setFadeInTime(a),a=this._modelSetting.getMotionFadeOutTimeValue(t,e),a>=0&&r.setFadeOutTime(a),r.setEffectIds(this._eyeBlinkIds,this._lipSyncIds),null!=this._motions.getValue(s)&&le.delete(this._motions.getValue(s)),this._motions.setValue(s,r),this._motionCount++,this._motionCount>=this._allMotionCount&&(this._state=pa.LoadTexture,this._motionManager.stopAllMotions(),this._updating=!1,this._initialized=!0,this.createRenderer(),this.setupTextures(),this.getRenderer().startUp(Ta))}))}}releaseMotions(){this._motions.clear()}releaseExpressions(){this._expressions.clear()}doDraw(){if(null==this._model)return;const t=[0,0,va.width,va.height];this.getRenderer().setRenderState(Ea,t),this.getRenderer().drawModel()}draw(t){null!=this._model&&this._state==pa.CompleteSetup&&(t.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(t),this.doDraw())}addParameterValueById(t,e){this._model.addParameterValueById(t,e)}constructor(){super(),this._modelSetting=null,this._modelHomeDir=null,this._userTimeSeconds=0,this._eyeBlinkIds=new t,this._lipSyncIds=new t,this._motions=new M,this._expressions=new M,this._hitArea=new t,this._userArea=new t,this._idParamAngleX=W.getIdManager().getId(Pt.ParamAngleX),this._idParamAngleY=W.getIdManager().getId(Pt.ParamAngleY),this._idParamAngleZ=W.getIdManager().getId(Pt.ParamAngleZ),this._idParamEyeBallX=W.getIdManager().getId(Pt.ParamEyeBallX),this._idParamEyeBallY=W.getIdManager().getId(Pt.ParamEyeBallY),this._idParamBodyAngleX=W.getIdManager().getId(Pt.ParamBodyAngleX),this._state=pa.LoadAssets,this._expressionCount=0,this._textureCount=0,this._motionCount=0,this._allMotionCount=0,this._wavFileHandler=new Ms}}let ya=null;class Sa{static getInstance(){return null==ya&&(ya=new Sa),ya}static releaseInstance(){null!=ya&&(ya=void 0),ya=null}getModel(t){return t<this._models.getSize()?this._models.at(t):null}releaseAllModel(){for(let t=0;t<this._models.getSize();t++)this._models.at(t).release(),this._models.set(t,null);this._models.clear()}onDrag(t,e){for(let i=0;i<this._models.getSize();i++){const s=this.getModel(i);s&&s.setDragging(t,e)}}onTap(t,e){ws.printMessage(`[APP]tap point: {x: ${t.toFixed(2)} y: ${e.toFixed(2)}}`);for(let i=0;i<this._models.getSize();i++)this._models.at(i).hitTest("Head",t,e)?(ws.printMessage("[APP]hit area: [Head]"),this._models.at(i).setRandomExpression()):this._models.at(i).hitTest("Body",t,e)&&(ws.printMessage("[APP]hit area: [Body]"),this._models.at(i).startRandomMotion("TapBody",2,this._finishedMotion))}onUpdate(){const{width:t,height:e}=va,i=this._models.getSize();for(let s=0;s<i;++s){const i=new g,r=this.getModel(s);r.getModel()&&(r.getModel().getCanvasWidth()>1&&t<e?(r.getModelMatrix().setWidth(2),i.scale(1,t/e)):i.scale(e/t,1),null!=this._viewMatrix&&i.multiplyByMatrix(this._viewMatrix)),r.update(),r.draw(i)}}nextScene(){const t=(this._sceneIndex+1)%Q;this.changeScene(t)}changeScene(t){this._sceneIndex=t,ws.printMessage(`[APP]model index: ${this._sceneIndex}`);const e="./static/"+Z[t]+"/";let i=Z[t];i+=".model3.json",this.releaseAllModel(),this._models.pushBack(new fa),this._models.at(0).loadAssets(e,i)}setViewMatrix(t){for(let e=0;e<16;e++)this._viewMatrix.getArray()[e]=t.getArray()[e]}setExpression(t){this._models.at(0).setExpression(t)}constructor(){this._finishedMotion=t=>{ws.printMessage("Motion Finished:"),console.log(t)},this._viewMatrix=new g,this._models=new t,this._sceneIndex=0,this.changeScene(this._sceneIndex)}}class xa{constructor(){this._textures=new t}release(){for(let t=this._textures.begin();t.notEqual(this._textures.end());t.preIncrement())Ta.deleteTexture(t.ptr().id);this._textures=null}createTextureFromPngFile(t,e,i){for(let s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement())if(s.ptr().fileName==t&&s.ptr().usePremultply==e)return s.ptr().img=new Image,s.ptr().img.onload=()=>i(s.ptr()),void(s.ptr().img.src=t);const s=new Image;s.onload=()=>{const r=Ta.createTexture();Ta.bindTexture(Ta.TEXTURE_2D,r),Ta.texParameteri(Ta.TEXTURE_2D,Ta.TEXTURE_MIN_FILTER,Ta.LINEAR_MIPMAP_LINEAR),Ta.texParameteri(Ta.TEXTURE_2D,Ta.TEXTURE_MAG_FILTER,Ta.LINEAR),e&&Ta.pixelStorei(Ta.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),Ta.texImage2D(Ta.TEXTURE_2D,0,Ta.RGBA,Ta.RGBA,Ta.UNSIGNED_BYTE,s),Ta.generateMipmap(Ta.TEXTURE_2D),Ta.bindTexture(Ta.TEXTURE_2D,null);const a=new Ca;null!=a&&(a.fileName=t,a.width=s.width,a.height=s.height,a.id=r,a.img=s,a.usePremultply=e,this._textures.pushBack(a)),i(a)},s.src=t}releaseTextures(){for(let t=0;t<this._textures.getSize();t++)this._textures.set(t,null);this._textures.clear()}releaseTextureByTexture(t){for(let e=0;e<this._textures.getSize();e++)if(this._textures.at(e).id==t){this._textures.set(e,null),this._textures.remove(e);break}}releaseTextureByFilePath(t){for(let e=0;e<this._textures.getSize();e++)if(this._textures.at(e).fileName==t){this._textures.set(e,null),this._textures.remove(e);break}}}class Ca{constructor(){this.id=null,this.width=0,this.height=0}}class ba extends g{constructor(){super(),this._screenLeft=0,this._screenRight=0,this._screenTop=0,this._screenBottom=0,this._maxLeft=0,this._maxRight=0,this._maxTop=0,this._maxBottom=0,this._maxScale=0,this._minScale=0}adjustTranslate(t,e){this._tr[0]*this._maxLeft+(this._tr[12]+t)>this._screenLeft&&(t=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+t)<this._screenRight&&(t=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+e)<this._screenTop&&(e=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+e)>this._screenBottom&&(e=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);const i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);g.multiply(i,this._tr,this._tr)}adjustScale(t,e,i){const s=this.getMaxScale(),r=this.getMinScale(),a=i*this._tr[0];a<r?this._tr[0]>0&&(i=r/this._tr[0]):a>s&&this._tr[0]>0&&(i=s/this._tr[0]);const n=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]),o=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1]);g.multiply(l,this._tr,this._tr),g.multiply(o,this._tr,this._tr),g.multiply(n,this._tr,this._tr)}setScreenRect(t,e,i,s){this._screenLeft=t,this._screenRight=e,this._screenBottom=i,this._screenTop=s}setMaxScreenRect(t,e,i,s){this._maxLeft=t,this._maxRight=e,this._maxTop=s,this._maxBottom=i}setMaxScale(t){this._maxScale=t}setMinScale(t){this._minScale=t}getMaxScale(){return this._maxScale}getMinScale(){return this._minScale}isMaxScale(){return this.getScaleX()>=this._maxScale}isMinScale(){return this.getScaleX()<=this._minScale}getScreenLeft(){return this._screenLeft}getScreenRight(){return this._screenRight}getScreenBottom(){return this._screenBottom}getScreenTop(){return this._screenTop}getMaxLeft(){return this._maxLeft}getMaxRight(){return this._maxRight}getMaxBottom(){return this._maxBottom}getMaxTop(){return this._maxTop}}var Ba;!function(t){t.CubismViewMatrix=ba}(Ba||(Ba={}));class wa{constructor(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}getCenterX(){return this._lastX}getCenterY(){return this._lastY}getDeltaX(){return this._deltaX}getDeltaY(){return this._deltaY}getStartX(){return this._startX}getStartY(){return this._startY}getScale(){return this._scale}getX(){return this._lastX}getY(){return this._lastY}getX1(){return this._lastX1}getY1(){return this._lastY1}getX2(){return this._lastX2}getY2(){return this._lastY2}isSingleTouch(){return this._touchSingle}isFlickAvailable(){return this._flipAvailable}disableFlick(){this._flipAvailable=!1}touchesBegan(t,e){this._lastX=t,this._lastY=e,this._startX=t,this._startY=e,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0}touchesMoved(t,e){this._lastX=t,this._lastY=e,this._lastTouchDistance=-1,this._touchSingle=!0}getFlickDistance(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)}calculateDistance(t,e,i,s){return Math.sqrt((t-i)*(t-i)+(e-s)*(e-s))}calculateMovingAmount(t,e){if(t>0!=e>0)return 0;const i=t>0?1:-1,s=Math.abs(t),r=Math.abs(e);return i*(s<r?s:r)}}class Pa{constructor(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new wa,this._deviceToScreen=new g,this._viewMatrix=new ba}initialize(){const{width:t,height:e}=va,i=t/e,s=-i,r=i;if(this._viewMatrix.setScreenRect(s,r,-1,1),this._viewMatrix.scale(1,1),this._deviceToScreen.loadIdentity(),t>e){const e=Math.abs(r-s);this._deviceToScreen.scaleRelative(e/t,-e/t)}else{const t=Math.abs(2);this._deviceToScreen.scaleRelative(t/e,-t/e)}this._deviceToScreen.translateRelative(.5*-t,.5*-e),this._viewMatrix.setMaxScale(2),this._viewMatrix.setMinScale(.8),this._viewMatrix.setMaxScreenRect(-2,2,-2,2)}release(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,Ta.deleteProgram(this._programId),this._programId=null}render(){Ta.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),Ta.flush();const t=Sa.getInstance();t.setViewMatrix(this._viewMatrix),t.onUpdate()}initializeSprite(){va.width,va.height,Ia.getInstance().getTextureManager(),null==this._programId&&(this._programId=Ia.getInstance().createShader())}onTouchesBegan(t,e){this._touchManager.touchesBegan(t,e)}onTouchesMoved(t,e){const i=this.transformViewX(this._touchManager.getX()),s=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(t,e),Sa.getInstance().onDrag(i,s)}onTouchesEnded(t,e){const i=Sa.getInstance();i.onDrag(0,0);{const t=this._deviceToScreen.transformX(this._touchManager.getX()),e=this._deviceToScreen.transformY(this._touchManager.getY());i.onTap(t,e)}}transformViewX(t){const e=this._deviceToScreen.transformX(t);return this._viewMatrix.invertTransformX(e)}transformViewY(t){const e=this._deviceToScreen.transformY(t);return this._viewMatrix.invertTransformY(e)}transformScreenX(t){return this._deviceToScreen.transformX(t)}transformScreenY(t){return this._deviceToScreen.transformY(t)}}let va=null,Ma=null,Ta=null,Ea=null;class Ia{static getInstance(){return null==Ma&&(Ma=new Ia),Ma}static releaseInstance(){null!=Ma&&Ma.release(),Ma=null}initialize(){va=document.createElement("canvas"),this._resizeCanvas(),Ta=va.getContext("webgl")||va.getContext("experimental-webgl");let t=document.getElementById("live2d-canvas");return Ta?(t.appendChild(va),Ea||(Ea=Ta.getParameter(Ta.FRAMEBUFFER_BINDING)),Ta.enable(Ta.BLEND),Ta.blendFunc(Ta.SRC_ALPHA,Ta.ONE_MINUS_SRC_ALPHA),"ontouchend"in va?(va.ontouchstart=Aa,va.ontouchmove=La,va.ontouchend=Da,va.ontouchcancel=ka):(va.onmousedown=Ra,va.onmousemove=Fa,va.onmouseup=Va),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),Ta=null,t.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)}onResize(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite();const t=[0,0,va.width,va.height];Ta.viewport(t[0],t[1],t[2],t[3])}release(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,Sa.releaseInstance(),W.dispose()}run(){const t=()=>{null!=Ma&&(ws.updateTime(),Ta.clearColor(0,0,0,0),Ta.enable(Ta.DEPTH_TEST),Ta.depthFunc(Ta.LEQUAL),Ta.clear(Ta.COLOR_BUFFER_BIT|Ta.DEPTH_BUFFER_BIT),Ta.clearDepth(1),Ta.enable(Ta.BLEND),Ta.blendFunc(Ta.SRC_ALPHA,Ta.ONE_MINUS_SRC_ALPHA),this._view.render(),requestAnimationFrame(t))};t()}createShader(){const t=Ta.createShader(Ta.VERTEX_SHADER);if(null==t)return ws.printMessage("failed to create vertexShader"),null;Ta.shaderSource(t,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),Ta.compileShader(t);const e=Ta.createShader(Ta.FRAGMENT_SHADER);if(null==e)return ws.printMessage("failed to create fragmentShader"),null;Ta.shaderSource(e,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),Ta.compileShader(e);const i=Ta.createProgram();return Ta.attachShader(i,t),Ta.attachShader(i,e),Ta.deleteShader(t),Ta.deleteShader(e),Ta.linkProgram(i),Ta.useProgram(i),i}getView(){return this._view}getTextureManager(){return this._textureManager}constructor(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new J,this._view=new Pa,this._textureManager=new xa}initializeCubism(){this._cubismOption.logFunction=ws.printMessage,this._cubismOption.loggingLevel=tt,W.startUp(this._cubismOption),W.initialize(),Sa.getInstance(),ws.updateTime(),this._view.initializeSprite()}_resizeCanvas(){va.width=window.innerWidth,va.height=window.innerHeight}}function Ra(t){if(!Ia.getInstance()._view)return void ws.printMessage("view notfound");Ia.getInstance()._captured=!0;const e=t.pageX,i=t.pageY;Ia.getInstance()._view.onTouchesBegan(e,i)}function Fa(t){if(!Ia.getInstance()._captured)return;if(!Ia.getInstance()._view)return void ws.printMessage("view notfound");const e=t.target.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top;Ia.getInstance()._view.onTouchesMoved(i,s)}function Va(t){if(Ia.getInstance()._captured=!1,!Ia.getInstance()._view)return void ws.printMessage("view notfound");const e=t.target.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top;Ia.getInstance()._view.onTouchesEnded(i,s)}function Aa(t){if(!Ia.getInstance()._view)return void ws.printMessage("view notfound");Ia.getInstance()._captured=!0;const e=t.changedTouches[0].pageX,i=t.changedTouches[0].pageY;Ia.getInstance()._view.onTouchesBegan(e,i)}function La(t){if(!Ia.getInstance()._captured)return;if(!Ia.getInstance()._view)return void ws.printMessage("view notfound");const e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,s=t.changedTouches[0].clientY-e.top;Ia.getInstance()._view.onTouchesMoved(i,s)}function Da(t){if(Ia.getInstance()._captured=!1,!Ia.getInstance()._view)return void ws.printMessage("view notfound");const e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,s=t.changedTouches[0].clientY-e.top;Ia.getInstance()._view.onTouchesEnded(i,s)}function ka(t){if(Ia.getInstance()._captured=!1,!Ia.getInstance()._view)return void ws.printMessage("view notfound");const e=t.target.getBoundingClientRect(),i=t.changedTouches[0].clientX-e.left,s=t.changedTouches[0].clientY-e.top;Ia.getInstance()._view.onTouchesEnded(i,s)}window.onload=()=>{0!=Ia.getInstance().initialize()&&(Ia.getInstance().run(),_a.getInstance())},window.onbeforeunload=()=>{Ia.releaseInstance()},window.onresize=()=>{Ia.getInstance().onResize()}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,